{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DevOps for SAS Solutions \u00b6 SASjs Powers \u00b6 If you're looking for the following capabilities, then SASjs is for you: Build locally, using standard GIT workflows, in your preferred IDE Create SAS projects that are agnostic to the \"flavour\" of SAS Cover your code with isolated TESTs and measure test coverage Quality check (lint) your SAS before hitting your GIT repo Create apps that deploy in seconds to any SAS environment Generate HTML documentation from your SAS program headers Eliminate dependency on the server filesystem (SASAUTOS) Make use of PIPELINES to auto-deploy your SAS projects Build apps with SAS, Python, or JS at the backend SASjs Components \u00b6 SASjs is \"batteries included\" when it comes to building, linting, deploying, testing, and documenting SAS Solutions. Our tools can be used individually, for specific needs, or together as part of an opinionated framework. The SASjs framework improves the scalability, velocity, and quality of SAS projects. It consists of the following main components: Macro library . A collection of macro based tools for SAS application development. See documentation . CLI tool . A command line utility for automating the compilation, build and deployment of your SAS Project. See documentation . VS Code Extension . Linting, Syntax Highlighting and Code Execution on Viya, SAS 9 BI, or SASjs Server Lint . A SAS Code Quality Checking tool. Rules are configurable. Server . An open source Web Server on Foundation SAS. Adapter . Connects client JS to server SAS. See documentation . Beyond regular Data Science projects, SASjs is also (naturally) a rocket boost for the development of Web Applications on SAS. Did you know you can deploy a HTML5 App on SAS 9 in just 2 lines of code: filename playme url \"https://sasjs.io/game\" ; %inc playme; Below is a demo of building and deploying a HTML5 App on SAS Viya in just one minute:","title":"Home"},{"location":"#devops-for-sas-solutions","text":"","title":"DevOps for SAS Solutions"},{"location":"#sasjs-powers","text":"If you're looking for the following capabilities, then SASjs is for you: Build locally, using standard GIT workflows, in your preferred IDE Create SAS projects that are agnostic to the \"flavour\" of SAS Cover your code with isolated TESTs and measure test coverage Quality check (lint) your SAS before hitting your GIT repo Create apps that deploy in seconds to any SAS environment Generate HTML documentation from your SAS program headers Eliminate dependency on the server filesystem (SASAUTOS) Make use of PIPELINES to auto-deploy your SAS projects Build apps with SAS, Python, or JS at the backend","title":"SASjs Powers"},{"location":"#sasjs-components","text":"SASjs is \"batteries included\" when it comes to building, linting, deploying, testing, and documenting SAS Solutions. Our tools can be used individually, for specific needs, or together as part of an opinionated framework. The SASjs framework improves the scalability, velocity, and quality of SAS projects. It consists of the following main components: Macro library . A collection of macro based tools for SAS application development. See documentation . CLI tool . A command line utility for automating the compilation, build and deployment of your SAS Project. See documentation . VS Code Extension . Linting, Syntax Highlighting and Code Execution on Viya, SAS 9 BI, or SASjs Server Lint . A SAS Code Quality Checking tool. Rules are configurable. Server . An open source Web Server on Foundation SAS. Adapter . Connects client JS to server SAS. See documentation . Beyond regular Data Science projects, SASjs is also (naturally) a rocket boost for the development of Web Applications on SAS. Did you know you can deploy a HTML5 App on SAS 9 in just 2 lines of code: filename playme url \"https://sasjs.io/game\" ; %inc playme; Below is a demo of building and deploying a HTML5 App on SAS Viya in just one minute:","title":"SASjs Components"},{"location":"angular/","text":"Angular \u00b6 The Angular seed app is based on ng new my-app with some additional components, e.g. for handling the SAS login and the history of requests. The repo is here: https://github.com/sasjs/angular-seed-app . Tips \u00b6 To enable relative routing you need to remove the <base href=\"/\"> tag","title":"Angular"},{"location":"angular/#angular","text":"The Angular seed app is based on ng new my-app with some additional components, e.g. for handling the SAS login and the history of requests. The repo is here: https://github.com/sasjs/angular-seed-app .","title":"Angular"},{"location":"angular/#tips","text":"To enable relative routing you need to remove the <base href=\"/\"> tag","title":"Tips"},{"location":"apps/","text":"Apps \u00b6 Below are a collection of Apps and Tools that can be deployed on either / both SAS 9 and SAS Viya platforms. Fun and Games \u00b6 Super Mario on SAS \u00b6 A SAS streamed version of a Nintendo classic. Works on both SAS 9 and Viya. Full instructions to deploy (on either platform) are available here . Source: https://github.com/sasjs/mario Sonic the Hedgehog on SAS \u00b6 A SASjs wrapper for this remake of the sega classic! Works on SAS 9 only (due to default CSP settings on Viya). Source: https://github.com/allanbowe/sonic Deployment: filename playme url \"https://raw.githubusercontent.com/allanbowe/sonic/master/sonic.sas\" ; %inc playme; RockRoller \u00b6 Dodge trees to see how far you can roll this rock in this infinite game! Works on both SAS 9 and Viya. Source: https://github.com/sasjs/rockroller SAS Streamed SAS Rap \u00b6 Run the code below (SAS9 or Viya), and open the link in a browser to hear a SAS streamed SAS Rap by Thiago De Souza filename playme url \"https://sasjs.io/rap.sas\" ; %inc playme; source: https://github.com/allanbowe/sasrap Tools \u00b6 Folder Navigator \u00b6 View & Edit Stored Processes (or Viya Jobs) with this folder navigator source: https://github.com/sasjs/folder-navigator Viya Client Token Generator \u00b6 The following code (Viya only) will create an app for generating a Client ID + Secret with various configuration options. For this to work, the sysuserid must have the admin rights for reading the consul token. filename vt url \"https://raw.githubusercontent.com/sasjs/viyatoken/master/runme.sas\" ; %inc vt; Run the above, then open YOURSERVER/SASJobExecution?_PROGRAM=/Public/app/viyatoken/clickme Source: https://github.com/sasjs/viyatoken Viya File Uploader \u00b6 This app will let you choose a local file and upload it to a directory on the Viya server. It returns a directory listing. To deploy: filename mc url \"https://raw.githubusercontent.com/sasjs/fileuploader/master/runme.sas\"; %inc mc; Run the above, then open YOURSERVER/SASJobExecution?_PROGRAM=/Public/app/fileuploader/clickme source: https://github.com/sasjs/fileuploader Viya Log Parser \u00b6 If you are fetching logs in JSON format, here is a handy tool to convert them to regular log format. There is an online version here or you can build it yourself from the repo below. Source: https://github.com/sasjs/viya-log-parser Seed Apps \u00b6 The following template repos provide a starting point for building a SAS Web App: https://github.com/sasjs/angular-seed-app - Angular https://github.com/sasjs/react-seed-app - React https://github.com/sasjs/minimal-seed-app - Vanilla JS There is also a seed app containing Jobs only (no Services) that is useful as a quick start for building SAS Data Engineering and Data Science projects: https://github.com/sasjs/template_jobs","title":"Apps"},{"location":"apps/#apps","text":"Below are a collection of Apps and Tools that can be deployed on either / both SAS 9 and SAS Viya platforms.","title":"Apps"},{"location":"apps/#fun-and-games","text":"","title":"Fun and Games"},{"location":"apps/#super-mario-on-sas","text":"A SAS streamed version of a Nintendo classic. Works on both SAS 9 and Viya. Full instructions to deploy (on either platform) are available here . Source: https://github.com/sasjs/mario","title":"Super Mario on SAS"},{"location":"apps/#sonic-the-hedgehog-on-sas","text":"A SASjs wrapper for this remake of the sega classic! Works on SAS 9 only (due to default CSP settings on Viya). Source: https://github.com/allanbowe/sonic Deployment: filename playme url \"https://raw.githubusercontent.com/allanbowe/sonic/master/sonic.sas\" ; %inc playme;","title":"Sonic the Hedgehog on SAS"},{"location":"apps/#rockroller","text":"Dodge trees to see how far you can roll this rock in this infinite game! Works on both SAS 9 and Viya. Source: https://github.com/sasjs/rockroller","title":"RockRoller"},{"location":"apps/#sas-streamed-sas-rap","text":"Run the code below (SAS9 or Viya), and open the link in a browser to hear a SAS streamed SAS Rap by Thiago De Souza filename playme url \"https://sasjs.io/rap.sas\" ; %inc playme; source: https://github.com/allanbowe/sasrap","title":"SAS Streamed SAS Rap"},{"location":"apps/#tools","text":"","title":"Tools"},{"location":"apps/#folder-navigator","text":"View & Edit Stored Processes (or Viya Jobs) with this folder navigator source: https://github.com/sasjs/folder-navigator","title":"Folder Navigator"},{"location":"apps/#viya-client-token-generator","text":"The following code (Viya only) will create an app for generating a Client ID + Secret with various configuration options. For this to work, the sysuserid must have the admin rights for reading the consul token. filename vt url \"https://raw.githubusercontent.com/sasjs/viyatoken/master/runme.sas\" ; %inc vt; Run the above, then open YOURSERVER/SASJobExecution?_PROGRAM=/Public/app/viyatoken/clickme Source: https://github.com/sasjs/viyatoken","title":"Viya Client Token Generator"},{"location":"apps/#viya-file-uploader","text":"This app will let you choose a local file and upload it to a directory on the Viya server. It returns a directory listing. To deploy: filename mc url \"https://raw.githubusercontent.com/sasjs/fileuploader/master/runme.sas\"; %inc mc; Run the above, then open YOURSERVER/SASJobExecution?_PROGRAM=/Public/app/fileuploader/clickme source: https://github.com/sasjs/fileuploader","title":"Viya File Uploader"},{"location":"apps/#viya-log-parser","text":"If you are fetching logs in JSON format, here is a handy tool to convert them to regular log format. There is an online version here or you can build it yourself from the repo below. Source: https://github.com/sasjs/viya-log-parser","title":"Viya Log Parser"},{"location":"apps/#seed-apps","text":"The following template repos provide a starting point for building a SAS Web App: https://github.com/sasjs/angular-seed-app - Angular https://github.com/sasjs/react-seed-app - React https://github.com/sasjs/minimal-seed-app - Vanilla JS There is also a seed app containing Jobs only (no Services) that is useful as a quick start for building SAS Data Engineering and Data Science projects: https://github.com/sasjs/template_jobs","title":"Seed Apps"},{"location":"backend-getstarted/","text":"Building a Backend on SAS 9 or Viya \u00b6 SAS 9 vs SAS Viya \u00b6 When building on SAS you will be interfacing with either SAS 9 or SAS Viya. The process for building the app will be the same with either instance, however the functionality / performance / security situation will differ as follows: SAS 9 SAS VIYA Stored Processes Job Execution Service WKS / STP Servers Compute Server only Client / System Identities Client / System (3.5+) Identities Metadata Server Postgres Database Both server types can stream arbitrary content to the automatic _webout SAS fileref and can make use of the _debug parameter. Project Folder Structure \u00b6 It's a good idea to keep all your source code in one repository, then you can build it all together for testing. The following folder structure is supported by sasjs : MyAmazingApp/ |-- /src /* all web stuff */ |-- /sas /* all SAS stuff */ |-- /build | |__ serviceinit.sas /* included at start of every service */ | |__ serviceterm.sas /* included at end of every service */ |-- /db | |-- /LIBREF1 | |__table1.ddl /* SQL only, without proc sql wrapper */ | |__table1.sas /* datalines */ |-- /macros | |__ macro1.sas /* each macro inserted into relevant services */ | |__ macro2.sas |-- /services /* services go in subfolders for organisation & security */ |-- /Admin | |__ adduser.sas /* services always lowercase */ | |__ remuser.sas |-- /Approvers | |__ approvestuff.sas |-- /Common |__ appinit.sas /* always the first service to be called in an app */ |__ getchartdata.sas The above structure is managed automatically when using sasjs-cli . Simply run the following command to install: npm i -g @sasjs/cli This will make the sasjs command available. You can now run sasjs create APPNAME to create a project with sample folder structure like above. Code Injection \u00b6 Code injection can happen when an attacker sends SAS code within a macro variable, which is then resolved. In Viya, all URL params are automatically quoted - however care is still needed when using them. To minimise the risk it is best to avoid url params entirely and deal purely with datasets served by a reliable HTML5<->SAS adapter. Data Storage \u00b6 SAS datasets (.sas7bdat files) are suitable when your data is READONLY, or being used for for single user storage (eg in WORK or SASUSER directories). Unless you have a SPDE server, or your datasets are created in batch and READONLY, they should not be used as the 'data layer' for your app. If your app needs to write data, it is best to use a database that supports real-time concurrent access.","title":"Getting Started"},{"location":"backend-getstarted/#building-a-backend-on-sas-9-or-viya","text":"","title":"Building a Backend on SAS 9 or Viya"},{"location":"backend-getstarted/#sas-9-vs-sas-viya","text":"When building on SAS you will be interfacing with either SAS 9 or SAS Viya. The process for building the app will be the same with either instance, however the functionality / performance / security situation will differ as follows: SAS 9 SAS VIYA Stored Processes Job Execution Service WKS / STP Servers Compute Server only Client / System Identities Client / System (3.5+) Identities Metadata Server Postgres Database Both server types can stream arbitrary content to the automatic _webout SAS fileref and can make use of the _debug parameter.","title":"SAS 9 vs SAS Viya"},{"location":"backend-getstarted/#project-folder-structure","text":"It's a good idea to keep all your source code in one repository, then you can build it all together for testing. The following folder structure is supported by sasjs : MyAmazingApp/ |-- /src /* all web stuff */ |-- /sas /* all SAS stuff */ |-- /build | |__ serviceinit.sas /* included at start of every service */ | |__ serviceterm.sas /* included at end of every service */ |-- /db | |-- /LIBREF1 | |__table1.ddl /* SQL only, without proc sql wrapper */ | |__table1.sas /* datalines */ |-- /macros | |__ macro1.sas /* each macro inserted into relevant services */ | |__ macro2.sas |-- /services /* services go in subfolders for organisation & security */ |-- /Admin | |__ adduser.sas /* services always lowercase */ | |__ remuser.sas |-- /Approvers | |__ approvestuff.sas |-- /Common |__ appinit.sas /* always the first service to be called in an app */ |__ getchartdata.sas The above structure is managed automatically when using sasjs-cli . Simply run the following command to install: npm i -g @sasjs/cli This will make the sasjs command available. You can now run sasjs create APPNAME to create a project with sample folder structure like above.","title":"Project Folder Structure"},{"location":"backend-getstarted/#code-injection","text":"Code injection can happen when an attacker sends SAS code within a macro variable, which is then resolved. In Viya, all URL params are automatically quoted - however care is still needed when using them. To minimise the risk it is best to avoid url params entirely and deal purely with datasets served by a reliable HTML5<->SAS adapter.","title":"Code Injection"},{"location":"backend-getstarted/#data-storage","text":"SAS datasets (.sas7bdat files) are suitable when your data is READONLY, or being used for for single user storage (eg in WORK or SASUSER directories). Unless you have a SPDE server, or your datasets are created in batch and READONLY, they should not be used as the 'data layer' for your app. If your app needs to write data, it is best to use a database that supports real-time concurrent access.","title":"Data Storage"},{"location":"buildsas9/","text":"SAS 9 Build \u00b6 Services \u00b6 Building services on SAS 9 is very straightforward. The below approach will work from 9.3 and upwards. * compile macros ; filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; * if the above fails, download and compile manually; * parmcards lets us write to a text file from open code ; filename ft15f001 temp; parmcards4; * do some sas, any inputs are now already WORK tables; data example1 example2; set sashelp . class ; run; * send data back; %webout (OPEN) %webout (ARR,example1) * Array format , fast, suitable for large tables ; %webout (OBJ,example2) * Object format , easier to work with ; %webout (CLOSE) ;;;; %mm_createwebservice (path=/User Folders/ &sysuserid /My Folder , name=testJob , code=ft15f001 , replace =yes)","title":"SAS9"},{"location":"buildsas9/#sas-9-build","text":"","title":"SAS 9 Build"},{"location":"buildsas9/#services","text":"Building services on SAS 9 is very straightforward. The below approach will work from 9.3 and upwards. * compile macros ; filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; * if the above fails, download and compile manually; * parmcards lets us write to a text file from open code ; filename ft15f001 temp; parmcards4; * do some sas, any inputs are now already WORK tables; data example1 example2; set sashelp . class ; run; * send data back; %webout (OPEN) %webout (ARR,example1) * Array format , fast, suitable for large tables ; %webout (OBJ,example2) * Object format , easier to work with ; %webout (CLOSE) ;;;; %mm_createwebservice (path=/User Folders/ &sysuserid /My Folder , name=testJob , code=ft15f001 , replace =yes)","title":"Services"},{"location":"buildviya/","text":"SAS Viya Build \u00b6 Services \u00b6 There are three main ways to create Services (jobs) in Viya: Manually through the /SASJobExecution interface As part of a build process using sasjs-cli Using code in SAS Studio. SAS Studio \u00b6 To follow the below, you'll need to compile the MacroCore library into your session. To do this, simply run the following filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; If you are unable to run the above code, you may not have internet access on your server. In this case, simply click this link and copy paste the content into your SAS session, and run it. We will create our service using the %mv_createwebservice() macro, which expects SAS code to be passed in as filerefs. This will create the service and provide the necessary precode to retrieve any data that has been sent - and automatically create that data as tables in WORK. To speed up this demo we are going to use a little known fileref with the alias ft15f001 - when combined with parmcards this allows us to write file content directly in open code, in a similar fashion to datalines and table data. filename ft15f001 temp; parmcards4; * do some sas. All inputs are ALREADY tables in WORK; data example1 example2; set sashelp . class ; run; * send data back; %webout (OPEN) %webout (ARR,example1) * Array format , fast, good for large tables; %webout (OBJ,example2) * Object format , easier to work with in JS; %webout (CLOSE) ;;;; %mv_createwebservice (path=/Public/myapp/common/appInit,name=testJob,code=ft15f001) You should now see a URL in the log with a link to your service. Tip You can modify your Job Execution service by navigating to YOURVIYASERVER/SASJobExecution and finding it in the folder tree.","title":"VIYA"},{"location":"buildviya/#sas-viya-build","text":"","title":"SAS Viya Build"},{"location":"buildviya/#services","text":"There are three main ways to create Services (jobs) in Viya: Manually through the /SASJobExecution interface As part of a build process using sasjs-cli Using code in SAS Studio.","title":"Services"},{"location":"buildviya/#sas-studio","text":"To follow the below, you'll need to compile the MacroCore library into your session. To do this, simply run the following filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; If you are unable to run the above code, you may not have internet access on your server. In this case, simply click this link and copy paste the content into your SAS session, and run it. We will create our service using the %mv_createwebservice() macro, which expects SAS code to be passed in as filerefs. This will create the service and provide the necessary precode to retrieve any data that has been sent - and automatically create that data as tables in WORK. To speed up this demo we are going to use a little known fileref with the alias ft15f001 - when combined with parmcards this allows us to write file content directly in open code, in a similar fashion to datalines and table data. filename ft15f001 temp; parmcards4; * do some sas. All inputs are ALREADY tables in WORK; data example1 example2; set sashelp . class ; run; * send data back; %webout (OPEN) %webout (ARR,example1) * Array format , fast, good for large tables; %webout (OBJ,example2) * Object format , easier to work with in JS; %webout (CLOSE) ;;;; %mv_createwebservice (path=/Public/myapp/common/appInit,name=testJob,code=ft15f001) You should now see a URL in the log with a link to your service. Tip You can modify your Job Execution service by navigating to YOURVIYASERVER/SASJobExecution and finding it in the folder tree.","title":"SAS Studio"},{"location":"cors/","text":"Cross Origin Resource Sharing (CORS) - also referred to as the Same Origin Policy - is a security setting enabled in all modern browsers that prevents a javascript loaded from Server A interfacing with Server B. This exists to prevent a script from, say, www.somedodgysite.com, interfering with a www.myimportantbank.com session. You'll know you are affected if you see a message such as the following in your browser console: XMLHttpRequest cannot load http://SASMIDTIER:8080/SASStoredProcess/do. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:54048' is therefore not allowed access. As this is a browser setting, for development purposes the issue can be side-stepped by launching your browser with the setting disabled. Sample commands for this are listed below: OS Browser Launch Command Mac Google Chrome open -n -a Google\\ Chrome --args --disable-web-security --user-data-dir=/tmp/chrome Mac Brave open -n -a /Applications/Brave\\ Browser.app/Contents/MacOS/Brave\\ Browser -n --args --incognito --disable-web-security --user-data-dir=\"/tmp/brave\" Linux Chromium chromium --disable-web-security --user-data-dir=\"/tmp/chrome\" Linux Google Chrome google-chrome --disable-web-security --user-data-dir=\"/tmp/chrome\" Windows Google Chrome \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --disable-web-security --disable-gpu --user-data-dir=C:\\Temp It does not seem to be possible to enable CORS in modern Firefox browsers. You will know if you are successful if you see a You are using an unsupported command-line flag: --disable-web-security. Stability and security will suffer. message. Note - even with CORS enabled you still may be unable to connect to SAS (9 or Viya) if whitelisting is enabled. Also, if you are pushing your web app to a server outside of SAS, you will still have the CORS issue. To resolve this you will need to ask your administrator, and perhaps offer them the guidance below. SAS 9 EBI \u00b6 To fix the issue on SAS EBI, open SAS Management Console and navigate through Application Management -> Configuration Manager -> SAS Application Infrastructure. Right click / properties and add your target url to the following property: sas.web.csrf.referers.knownHosts Some points to note about this list of urls: They are comma separated The domain should include the trailing slash/ The domain can include a partial path for further security, eg https://mydomain.com/usethispart/ After modifying the property, the SAS Web Application Server must be restarted. For more information, see the SAS Middle Tier Admin Guide . SAS Viya \u00b6 A comprehensive article on CORS and CSRF management on SAS Viya is available here .","title":"CORS"},{"location":"cors/#sas-9-ebi","text":"To fix the issue on SAS EBI, open SAS Management Console and navigate through Application Management -> Configuration Manager -> SAS Application Infrastructure. Right click / properties and add your target url to the following property: sas.web.csrf.referers.knownHosts Some points to note about this list of urls: They are comma separated The domain should include the trailing slash/ The domain can include a partial path for further security, eg https://mydomain.com/usethispart/ After modifying the property, the SAS Web Application Server must be restarted. For more information, see the SAS Middle Tier Admin Guide .","title":"SAS 9 EBI"},{"location":"cors/#sas-viya","text":"A comprehensive article on CORS and CSRF management on SAS Viya is available here .","title":"SAS Viya"},{"location":"design/","text":"Design \u00b6 Save yourself a lot of rework by getting at least a rough idea of what you want to build, before you build it! User Experience \u00b6 The frontend design process is split between UX (User Experience, the overall flow) and UI (the User Interface, the actual look and feel). An example of a User Experience might be \"A user can access any feature on the site in 4 clicks or less\". Tools \u00b6 Here is a list of useful tools for quickly mocking up a potential user experience lucidchart.com - great for diagrams mockplus balsamiq - wireframes User Interface \u00b6 You save a lot of rework when building frontend apps if you can clearly specify what the app should look like before you build it. One way to build apps quickly is to follow consistent style frameworks . If you're looking to build something more bespoke, then it really makes sense to leverage a design tool. SAS provide some great guidance for building visually appealing interfaces - see: https://communities.sas.com/html/assets/breports/index.html . More from the SAS design team here: https://medium.com/sas-software-design . Tools \u00b6 Figma \u00b6 Figma is a web based tool (although there are desktop versions) which means you can access your work from any machine. It comes highly recommended from us for a number of reasons: Free to use Send links to your designs A developer can extract each object (eg as vectors), and exact CSS attributes Design screens that respond to screen size changes It's a professional tool, and well worth spending an hour or so to learn about. Link: https://www.figma.com Sketch \u00b6 Sketch - a great desktop tool, used primarily on macs. Very powerful for drawing images and standalone graphics. Tips \u00b6 HTML Character Codes \u00b6 You can spice (\ud83c\udf36) up your page(\ud83d\udcc3) with a special character codes (\ud83c\udf08) to make it more fun and readable! You can do this by entering the UTF-8 characters directly in your code - however this can occasionally cause problems when copy pasting into different editors (eg WLATIN1, or SAS Enterprise Guide in some windows instances). An alternative is to use HTML escape codes. So for instance, use &#128424; to represent \ud83d\udda8. A useful website for finding / searching for such codes is here: https://html-css-js.com/html/character-codes/icons/ . Icons \u00b6 An alternative to special characters is to use dedicated icon sets. This provides a broader range of images, without necessarily involving the load of an image (they are often embedded within CSS in Base64 or SVG format, or contain large numbers of images in a single PNG) The great thing is that they can be easily added to your page with a simple tag. Examples of icon sets: Streamline: https://streamlineicons.com Clarity: https://clarity.design/icons Linea: https://linea.io/ Frameworks \u00b6 It's possible to build good looking apps quickly without having to specify every detail if you can follow existing style guides / frameworks. Choices include: Semantic ui - with a specific version for React Clarity Design - Angular but will soon support React / Vue also Material Design - built by Google Fluent UI - built by Microsoft Image Editing \u00b6 https://svgtopng.com https://www.photopea.com - adobe like https://onlinepngtools.com/convert-png-to-jpg - for adding background in png https://www.calculatorsoup.com/calculators/math/ratios.php - maintaining ratio stuff","title":"Design"},{"location":"design/#design","text":"Save yourself a lot of rework by getting at least a rough idea of what you want to build, before you build it!","title":"Design"},{"location":"design/#user-experience","text":"The frontend design process is split between UX (User Experience, the overall flow) and UI (the User Interface, the actual look and feel). An example of a User Experience might be \"A user can access any feature on the site in 4 clicks or less\".","title":"User Experience"},{"location":"design/#tools","text":"Here is a list of useful tools for quickly mocking up a potential user experience lucidchart.com - great for diagrams mockplus balsamiq - wireframes","title":"Tools"},{"location":"design/#user-interface","text":"You save a lot of rework when building frontend apps if you can clearly specify what the app should look like before you build it. One way to build apps quickly is to follow consistent style frameworks . If you're looking to build something more bespoke, then it really makes sense to leverage a design tool. SAS provide some great guidance for building visually appealing interfaces - see: https://communities.sas.com/html/assets/breports/index.html . More from the SAS design team here: https://medium.com/sas-software-design .","title":"User Interface"},{"location":"design/#tools_1","text":"","title":"Tools"},{"location":"design/#figma","text":"Figma is a web based tool (although there are desktop versions) which means you can access your work from any machine. It comes highly recommended from us for a number of reasons: Free to use Send links to your designs A developer can extract each object (eg as vectors), and exact CSS attributes Design screens that respond to screen size changes It's a professional tool, and well worth spending an hour or so to learn about. Link: https://www.figma.com","title":"Figma"},{"location":"design/#sketch","text":"Sketch - a great desktop tool, used primarily on macs. Very powerful for drawing images and standalone graphics.","title":"Sketch"},{"location":"design/#tips","text":"","title":"Tips"},{"location":"design/#html-character-codes","text":"You can spice (\ud83c\udf36) up your page(\ud83d\udcc3) with a special character codes (\ud83c\udf08) to make it more fun and readable! You can do this by entering the UTF-8 characters directly in your code - however this can occasionally cause problems when copy pasting into different editors (eg WLATIN1, or SAS Enterprise Guide in some windows instances). An alternative is to use HTML escape codes. So for instance, use &#128424; to represent \ud83d\udda8. A useful website for finding / searching for such codes is here: https://html-css-js.com/html/character-codes/icons/ .","title":"HTML Character Codes"},{"location":"design/#icons","text":"An alternative to special characters is to use dedicated icon sets. This provides a broader range of images, without necessarily involving the load of an image (they are often embedded within CSS in Base64 or SVG format, or contain large numbers of images in a single PNG) The great thing is that they can be easily added to your page with a simple tag. Examples of icon sets: Streamline: https://streamlineicons.com Clarity: https://clarity.design/icons Linea: https://linea.io/","title":"Icons"},{"location":"design/#frameworks","text":"It's possible to build good looking apps quickly without having to specify every detail if you can follow existing style guides / frameworks. Choices include: Semantic ui - with a specific version for React Clarity Design - Angular but will soon support React / Vue also Material Design - built by Google Fluent UI - built by Microsoft","title":"Frameworks"},{"location":"design/#image-editing","text":"https://svgtopng.com https://www.photopea.com - adobe like https://onlinepngtools.com/convert-png-to-jpg - for adding background in png https://www.calculatorsoup.com/calculators/math/ratios.php - maintaining ratio stuff","title":"Image Editing"},{"location":"documentation/","text":"Documentation \u00b6 It's said that quality of software is measured by the quality of it's documentation! Guides \u00b6 As a minimum, the following guides should be produced for each app: User Guide Configuration Guide Deployment Guide Developer Guide Building Documentation \u00b6 Whilst the concept of \"word documents on sharepoint sites\" is still etched into the skulls of many, there are alternatives available if your firewalls allow. Whilst proprietary office formats and rich text editors are user friendly, they don't fit easily and transparently into source control and continuous integration workflows. The primary Text Based markup options are MarkDown (md) and reStructuredText (rst). Markdown is easier to learn, whilst RST format is more flexible (can generate PDFs and also provide documentation within code files). README \u00b6 Suitable for small projects, all four guides could be added to a single README file in the root of your repo. Using a tool such as markdown-to-html you can even convert your README into a nicely formatted HTML page as part of your build process. markdown \" $MYPROJECT /README.md\" > \" $BUILDLOC /deploy/README.html\" Docsify \u00b6 We love this tool so much it is now our primary documentation mechanism, and you will find it in all our seed apps. The template documentation site is also on github pages and you can see it here: https://sasjs.github.io/docs The docsify project documentation is here: https://docsify.js.org/#/ MkDocs \u00b6 This is a great tool for generating a static HTML site where each page can be easily written using MarkDown. This page you are reading was built with MkDocs, as well as the documentation site for Data Controller . SAS Markdown \u00b6 If you want your code in SAS format inside MkDocs markdown, make sure you are using the most recent version (1+) and add the following to your mkdocs.yml file: theme : name : canBeAnything-UseExistingOneIfThere highlightjs : true hljs_languages : - SAS Then when you are writing code, just put sas on the first line of the code block, eg: ```sas data some sas; set formatted nicely; run; ``` You can display in any one of 189 different languages this way. Contributions Welcome With an MkDoks site like this, you can click on any section in the mkdocs site and make edits directly in github. If you find any broken links or typos, or would like to add more sections this site - go right ahead! Your change will be submitted as a PR. Doc Tip You can even make tips like this! Read on To create a \"tip\" like you see above, or the \"note\" above it, you first need to enable the extension in your mkdocs.yml like so: markdown_extensions : - admonition Then you can write syntax like follows: !!! note \"note title\" This is a note !!! warning \"warning title\" This is a warning !!! error \"error title\" This is an error !!! tip \"tip title\" This is a tip For more info, see docs . DoxyGen \u00b6 DoxyGen is a commandline tool that can generate a number of output formats, similar to Sphinx. More suitable for documenting code, than generating standalone docs (although it can do that also). The Macro Core library is documented this way. The following is an example from the mv_webout() macro: /** @file mv_webout.sas @brief Send data to/from the SAS Viya Job Execution Service @details This macro should be added to the start of each Job Execution Service, **immediately** followed by a call to: %mv_webout(FETCH) This will read all the input data and create same-named SAS datasets in the WORK library. You can then insert your code, and send data back using the following syntax: data some datasets; * make some data ; retain some columns; run; %mv_webout(OPEN) %mv_webout(ARR,some) * Array format, fast, suitable for large tables ; %mv_webout(OBJ,datasets) * Object format, easier to work with ; %mv_webout(CLOSE) @param action Either OPEN, ARR, OBJ or CLOSE @param ds The dataset to send back to the frontend @param _webout= fileref for returning the json @param fref= temp fref @param dslabel= value to use instead of the real name for sending to JSON @param fmt= change to N to strip formats from output <h4> Dependencies </h4> @li mp_jsonout.sas @li mf_getuser.sas @version Viya 3.3 @author Allan Bowe **/ Notice the following: file - filename brief - a title for the file details - a long description, HTML can be embedded. Indent by 4 spaces to format content as code. param - a description of each parameter. Keyword parameters have an = suffix. dependencies - not part of the doxygen spec but used by the sasjs-cli to compile macro calls so that each service contains all relevant macros (and no extra macros) version - used in the macrocore library to denote the earliest known version in which the code will run /** @details this is my detailed explanation. This part is indented 2 spaces. %* this is a SAS comment, note the style - avoids the header being closed; %* it is indented 6 spaces (4 spaces from previous non code line); **/ Sphinx \u00b6 Primarily used for writing in rst format, sphinx is a very powerful documentation builder, built in python and used for all the official python documentation. The founder of this language went on to launch readthedocs.org a hosting platform for Sphinx-built sites. Some useful resources: Getting started video Online RST renderer: https://rst.ninjs.org RST Table generator Cheatsheet: https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html TypeDoc \u00b6 The good thing about using typescript to build your frontend is that it can auto-generate a lot of documentation as types etc can be inferred from the syntax. The SASjs library is documented this way - adapter.sasjs.io . More info available here .","title":"Documentation"},{"location":"documentation/#documentation","text":"It's said that quality of software is measured by the quality of it's documentation!","title":"Documentation"},{"location":"documentation/#guides","text":"As a minimum, the following guides should be produced for each app: User Guide Configuration Guide Deployment Guide Developer Guide","title":"Guides"},{"location":"documentation/#building-documentation","text":"Whilst the concept of \"word documents on sharepoint sites\" is still etched into the skulls of many, there are alternatives available if your firewalls allow. Whilst proprietary office formats and rich text editors are user friendly, they don't fit easily and transparently into source control and continuous integration workflows. The primary Text Based markup options are MarkDown (md) and reStructuredText (rst). Markdown is easier to learn, whilst RST format is more flexible (can generate PDFs and also provide documentation within code files).","title":"Building Documentation"},{"location":"documentation/#readme","text":"Suitable for small projects, all four guides could be added to a single README file in the root of your repo. Using a tool such as markdown-to-html you can even convert your README into a nicely formatted HTML page as part of your build process. markdown \" $MYPROJECT /README.md\" > \" $BUILDLOC /deploy/README.html\"","title":"README"},{"location":"documentation/#docsify","text":"We love this tool so much it is now our primary documentation mechanism, and you will find it in all our seed apps. The template documentation site is also on github pages and you can see it here: https://sasjs.github.io/docs The docsify project documentation is here: https://docsify.js.org/#/","title":"Docsify"},{"location":"documentation/#mkdocs","text":"This is a great tool for generating a static HTML site where each page can be easily written using MarkDown. This page you are reading was built with MkDocs, as well as the documentation site for Data Controller .","title":"MkDocs"},{"location":"documentation/#sas-markdown","text":"If you want your code in SAS format inside MkDocs markdown, make sure you are using the most recent version (1+) and add the following to your mkdocs.yml file: theme : name : canBeAnything-UseExistingOneIfThere highlightjs : true hljs_languages : - SAS Then when you are writing code, just put sas on the first line of the code block, eg: ```sas data some sas; set formatted nicely; run; ``` You can display in any one of 189 different languages this way. Contributions Welcome With an MkDoks site like this, you can click on any section in the mkdocs site and make edits directly in github. If you find any broken links or typos, or would like to add more sections this site - go right ahead! Your change will be submitted as a PR. Doc Tip You can even make tips like this! Read on To create a \"tip\" like you see above, or the \"note\" above it, you first need to enable the extension in your mkdocs.yml like so: markdown_extensions : - admonition Then you can write syntax like follows: !!! note \"note title\" This is a note !!! warning \"warning title\" This is a warning !!! error \"error title\" This is an error !!! tip \"tip title\" This is a tip For more info, see docs .","title":"SAS Markdown"},{"location":"documentation/#doxygen","text":"DoxyGen is a commandline tool that can generate a number of output formats, similar to Sphinx. More suitable for documenting code, than generating standalone docs (although it can do that also). The Macro Core library is documented this way. The following is an example from the mv_webout() macro: /** @file mv_webout.sas @brief Send data to/from the SAS Viya Job Execution Service @details This macro should be added to the start of each Job Execution Service, **immediately** followed by a call to: %mv_webout(FETCH) This will read all the input data and create same-named SAS datasets in the WORK library. You can then insert your code, and send data back using the following syntax: data some datasets; * make some data ; retain some columns; run; %mv_webout(OPEN) %mv_webout(ARR,some) * Array format, fast, suitable for large tables ; %mv_webout(OBJ,datasets) * Object format, easier to work with ; %mv_webout(CLOSE) @param action Either OPEN, ARR, OBJ or CLOSE @param ds The dataset to send back to the frontend @param _webout= fileref for returning the json @param fref= temp fref @param dslabel= value to use instead of the real name for sending to JSON @param fmt= change to N to strip formats from output <h4> Dependencies </h4> @li mp_jsonout.sas @li mf_getuser.sas @version Viya 3.3 @author Allan Bowe **/ Notice the following: file - filename brief - a title for the file details - a long description, HTML can be embedded. Indent by 4 spaces to format content as code. param - a description of each parameter. Keyword parameters have an = suffix. dependencies - not part of the doxygen spec but used by the sasjs-cli to compile macro calls so that each service contains all relevant macros (and no extra macros) version - used in the macrocore library to denote the earliest known version in which the code will run /** @details this is my detailed explanation. This part is indented 2 spaces. %* this is a SAS comment, note the style - avoids the header being closed; %* it is indented 6 spaces (4 spaces from previous non code line); **/","title":"DoxyGen"},{"location":"documentation/#sphinx","text":"Primarily used for writing in rst format, sphinx is a very powerful documentation builder, built in python and used for all the official python documentation. The founder of this language went on to launch readthedocs.org a hosting platform for Sphinx-built sites. Some useful resources: Getting started video Online RST renderer: https://rst.ninjs.org RST Table generator Cheatsheet: https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html","title":"Sphinx"},{"location":"documentation/#typedoc","text":"The good thing about using typescript to build your frontend is that it can auto-generate a lot of documentation as types etc can be inferred from the syntax. The SASjs library is documented this way - adapter.sasjs.io . More info available here .","title":"TypeDoc"},{"location":"faq/","text":"Frequently Asked Questions \u00b6 Do you have examples of SAS apps built with the SASjs framework? \u00b6 We have a list of public SAS apps in github repositories available here - using these you can see examples of the configuration used to build SASjs apps. There is also a commercial app built with the framework that has been deployed to customers in several countries - it's called Data Controller for SAS What are the Minimum Requirements for building Apps on SAS? \u00b6 To build apps on SAS you need SAS Viya 3.4 and above, or SAS 9.3 and above with Stored Process Server. You cannot create web apps on SAS with University Edition. To check if you have SAS Viya, open SAS Studio, click your user profile and click \"About\". If you are using Enterprise Guide, then simply run: data _null_ ; length url $ 128 ; rc=METADATA_GETURI( \"Stored Process Web App\" ,url); putlog 'Your SAS 9 url is: ' url ; run; Which Browsers Does SASjs Support? \u00b6 With the right polyfills your SASjs app can support a very wide range of browsers, however the question is - do you really want to? There can be a lot of edge cases to cover and support. For guidance you might consider following SAS Institute's browser support policy . Note the diminishing support for IE. I want to help, but I\u2019m not a developer. Are there any ways for non-coders to contribute? \u00b6 Answer questions from new users in the community channels Write instruction manuals or commit to the docs Make tutorial videos { \"@context\": \"https://schema.org\", \"@type\": \"FAQPage\", \"mainEntity\": [{ \"@type\": \"Question\", \"name\": \"What are the Minimum Requirements for building Apps on SAS?\", \"acceptedAnswer\": { \"@type\": \"Answer\", \"text\": \"<p>To build apps on SAS you need SAS Viya 3.4 and above, or SAS 9.3 and above with Stored Process Server.</p><p><b>You cannot create web apps on SAS with University Edition.</b></p><p>To check if you have SAS Viya, open SAS Studio, click your user profile and click 'About'. </p><p><a href=https://sasjs.io/faq/#minimum-requirements> Click here </a> for more information</p>\" } }, { \"@type\": \"Question\", \"name\": \"Which apps have been built with the SASjs framework?\", \"acceptedAnswer\": { \"@type\": \"Answer\", \"text\": \"<p>A list of public SAS apps in github repositories is available <a href=https://sasjs.io/apps/>here</a></p> - using these you can see examples of the configuration used to build SASjs apps.<p>There is also a commercial app built with the framework that has been deployed to customers in several countries - it's called <a href=https://datacontroller.io>Data Controller for SAS</a></p>\" } }, { \"@type\": \"Question\", \"name\": \"Which browsers does SASjs support?\", \"acceptedAnswer\": { \"@type\": \"Answer\", \"text\": \"<p>With the right polyfills your SASjs app can support a very wide range of browsers, however the question is - do you really want to? There can be a lot of edge cases to cover and support.</p><p>For guidance you might consider following SAS Institute's browser <a href=https://support.sas.com/en/documentation/third-party-software-reference/9-4/support-for-9-4-web-browsers.html#:~:text=Microsoft%20Internet%20Explorer%20and%20Microsoft%20Edge&text=For%20most%20SAS%209.4%20applications,do%20not%20support%20Microsoft%20Edge>support policy</a>. Note the diminishing support for IE. </p>\" } }] }","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#do-you-have-examples-of-sas-apps-built-with-the-sasjs-framework","text":"We have a list of public SAS apps in github repositories available here - using these you can see examples of the configuration used to build SASjs apps. There is also a commercial app built with the framework that has been deployed to customers in several countries - it's called Data Controller for SAS","title":"Do you have examples of SAS apps built with the SASjs framework?"},{"location":"faq/#what-are-the-minimum-requirements-for-building-apps-on-sas","text":"To build apps on SAS you need SAS Viya 3.4 and above, or SAS 9.3 and above with Stored Process Server. You cannot create web apps on SAS with University Edition. To check if you have SAS Viya, open SAS Studio, click your user profile and click \"About\". If you are using Enterprise Guide, then simply run: data _null_ ; length url $ 128 ; rc=METADATA_GETURI( \"Stored Process Web App\" ,url); putlog 'Your SAS 9 url is: ' url ; run;","title":"What are the Minimum Requirements for building Apps on SAS?"},{"location":"faq/#which-browsers-does-sasjs-support","text":"With the right polyfills your SASjs app can support a very wide range of browsers, however the question is - do you really want to? There can be a lot of edge cases to cover and support. For guidance you might consider following SAS Institute's browser support policy . Note the diminishing support for IE.","title":"Which Browsers Does SASjs Support?"},{"location":"faq/#i-want-to-help-but-im-not-a-developer-are-there-any-ways-for-non-coders-to-contribute","text":"Answer questions from new users in the community channels Write instruction manuals or commit to the docs Make tutorial videos { \"@context\": \"https://schema.org\", \"@type\": \"FAQPage\", \"mainEntity\": [{ \"@type\": \"Question\", \"name\": \"What are the Minimum Requirements for building Apps on SAS?\", \"acceptedAnswer\": { \"@type\": \"Answer\", \"text\": \"<p>To build apps on SAS you need SAS Viya 3.4 and above, or SAS 9.3 and above with Stored Process Server.</p><p><b>You cannot create web apps on SAS with University Edition.</b></p><p>To check if you have SAS Viya, open SAS Studio, click your user profile and click 'About'. </p><p><a href=https://sasjs.io/faq/#minimum-requirements> Click here </a> for more information</p>\" } }, { \"@type\": \"Question\", \"name\": \"Which apps have been built with the SASjs framework?\", \"acceptedAnswer\": { \"@type\": \"Answer\", \"text\": \"<p>A list of public SAS apps in github repositories is available <a href=https://sasjs.io/apps/>here</a></p> - using these you can see examples of the configuration used to build SASjs apps.<p>There is also a commercial app built with the framework that has been deployed to customers in several countries - it's called <a href=https://datacontroller.io>Data Controller for SAS</a></p>\" } }, { \"@type\": \"Question\", \"name\": \"Which browsers does SASjs support?\", \"acceptedAnswer\": { \"@type\": \"Answer\", \"text\": \"<p>With the right polyfills your SASjs app can support a very wide range of browsers, however the question is - do you really want to? There can be a lot of edge cases to cover and support.</p><p>For guidance you might consider following SAS Institute's browser <a href=https://support.sas.com/en/documentation/third-party-software-reference/9-4/support-for-9-4-web-browsers.html#:~:text=Microsoft%20Internet%20Explorer%20and%20Microsoft%20Edge&text=For%20most%20SAS%209.4%20applications,do%20not%20support%20Microsoft%20Edge>support policy</a>. Note the diminishing support for IE. </p>\" } }] }","title":"I want to help, but I\u2019m not a developer. Are there any ways for non-coders to contribute?"},{"location":"frontend-deployment/","text":"Deployment is the process of taking the app you have built, and putting it somewhere that others can access it! There are many ways to deploy a SAS web app - we will describe the following: SAS Web Server Third party Server Streaming Apps Desktop Apps Another option, not described here, is to deploy your frontend as content on a webdav server. SAS Web Server \u00b6 For Single Page Web Apps you are highly recommended to upload them to the static content area of the SAS web server. This avoids the need to configure serverUrl and for administrators to whitelist any additional servers. SAS9 Deploy \u00b6 The standard location of the static content area on the SAS9 web server is !SASCONFIG/LevX/Web/WebServer/htdocs . For larger customers, your web server may be on a different server to the application server. The app should go into a subfolder (eg htdocs/YOURAPP ). It will then be visible ad YOURSERVER.COM/YOURAPP. To find the server name, you can run the following code: data _null_ ; length url $ 128 ; rc=METADATA_GETURI( \"Stored Process Web App\" ,url); putlog 'Your SAS 9 url is: ' url ; run; Viya Deploy \u00b6 The standard location of the static content area on the Viya web server is /var/www/html . If this isn't right you can take the following advice courtesy of Kurt Bremser in this communities thread : Check if httpd uses a special config file (display the command line with ps -f). If not, simply search for httpd.conf. Within that, you find the location of DocumentRoot. Third Party Server \u00b6 With this approach you have a lot of possibilities, as you can use any technology you like for the backend, including a database, and just use SAS when analytics are needed. This approach typically requires administrator support, as your domain will need to be whitelisted from SAS. Streaming Apps \u00b6 Streaming apps are served directly from the SAS logical folder tree - ie Metadata in SAS 9 or SAS Drive in Viya. The benefits are: No need for a web server No client/secret needed Nothing to whitelist Can be done by ANY SAS user (as last resort, can deploy to home directory) Ability to secure the frontend using folder permissions (not available to other methods) The downsides: Performance. The app will be much less responsive (ie, slower) than if you deploy to the web server. This is due to the cost of the first request, however the second / subsequent requests are typically cached by the browser so are much faster. Efficiency. Linked to the above, storage and throughput wise it's not an efficient way to deploy nor serve a web app. Limited functionality. The vast majority of apps will work fine, but there are some edge cases that are not yet handled. Streaming App Configuration \u00b6 Another great thing about streaming apps is that they require no changes to your frontend! It's simply some additional config in the compilation process, specifically the streamConfig attribute. This can go either at root or target level in your sasjsconfig.json file. The relevant attributes are: streamWeb - set to true to create the streaming app as part of the sasjs compile process. webSourcePath - the local folder containing the built version of the app. If you are writing vanilla js, it's just the folder containing your index.html . For React/Angular, it could be your dist or build folder. streamServiceName - the name of the service containing the index.html . This is a SAS service named clickme by default. streamWebFolder - the name of the SAS logical folder under which all the web content will be stored. Streaming App Compilation \u00b6 When running sasjs web (also executed as part of sasjs compile ), the SASjs CLI will open up the index.html in the webSourcePath folder and migrate a copy of every dependency (JS, CSS, images, sounds, etc) into the sasjsbuild/services/$(streamWebFolder) folder. For SAS 9, all content will be converted into Stored Processes. This is achieved by base64 encoding the content and streaming it back with the appropriate content-type. For Viya, content is deployed as actual files in SAS Drive. This is a lot more space efficient. In addition, to avoid the issue with Viya-streamed files whereby a redirect occurs to a temporary UUID from the files service, we call the index.html with an extra parameter - _debug=2 . This wraps the response in an iframe, and by embedding some extra attributes, we surface the child contents so it looks like the main page, however a user-friendly URL is retained. To clarify - all you need to do to achieve the above is run sasjs compile . Streaming App Build \u00b6 The build process takes all the compiled content in the sasjsbuild folder and turns it into a build pack. The build pack comes in two forms: JSON file (used exclusively when autodeploying to SAS Viya using the REST APIs) SAS file (can be used by both SAS 9 or Viya to deploy all content programmatically) The build pack is created by running sasjs build . The name of the pack is determined by the buildOutputFileName attribute, and takes the target name by default. Streaming App Deployment \u00b6 One way to deploy a streamed app is to simply run the generated SAS file. If you can host this somewhere, you can deploy a SAS App to any customer with just two lines of code - here's an example . Using this approach, the link to the final app will be shown in the SAS log. For automated (CI/CD) development, you will probably want to do this using the command line. For that you will need to ensure the deployServicePack attribute is true . With this, you can autodeploy by simply running sasjs deploy . The link to the final app will be shown in the console. Note - you will first need to have authenticated to your SAS server using sasjs auth . Desktop Apps \u00b6 Another option for building apps is to actually host them on the desktop. Using technologies such as Electron, or React Native, you can build apps that are saved on the users desktop or mobile device. This will again require server whitelisting, the use of a CLIENT/SECRET, or a dedicated (Third party) web server.","title":"Deployment"},{"location":"frontend-deployment/#sas-web-server","text":"For Single Page Web Apps you are highly recommended to upload them to the static content area of the SAS web server. This avoids the need to configure serverUrl and for administrators to whitelist any additional servers.","title":"SAS Web Server"},{"location":"frontend-deployment/#sas9-deploy","text":"The standard location of the static content area on the SAS9 web server is !SASCONFIG/LevX/Web/WebServer/htdocs . For larger customers, your web server may be on a different server to the application server. The app should go into a subfolder (eg htdocs/YOURAPP ). It will then be visible ad YOURSERVER.COM/YOURAPP. To find the server name, you can run the following code: data _null_ ; length url $ 128 ; rc=METADATA_GETURI( \"Stored Process Web App\" ,url); putlog 'Your SAS 9 url is: ' url ; run;","title":"SAS9 Deploy"},{"location":"frontend-deployment/#viya-deploy","text":"The standard location of the static content area on the Viya web server is /var/www/html . If this isn't right you can take the following advice courtesy of Kurt Bremser in this communities thread : Check if httpd uses a special config file (display the command line with ps -f). If not, simply search for httpd.conf. Within that, you find the location of DocumentRoot.","title":"Viya Deploy"},{"location":"frontend-deployment/#third-party-server","text":"With this approach you have a lot of possibilities, as you can use any technology you like for the backend, including a database, and just use SAS when analytics are needed. This approach typically requires administrator support, as your domain will need to be whitelisted from SAS.","title":"Third Party Server"},{"location":"frontend-deployment/#streaming-apps","text":"Streaming apps are served directly from the SAS logical folder tree - ie Metadata in SAS 9 or SAS Drive in Viya. The benefits are: No need for a web server No client/secret needed Nothing to whitelist Can be done by ANY SAS user (as last resort, can deploy to home directory) Ability to secure the frontend using folder permissions (not available to other methods) The downsides: Performance. The app will be much less responsive (ie, slower) than if you deploy to the web server. This is due to the cost of the first request, however the second / subsequent requests are typically cached by the browser so are much faster. Efficiency. Linked to the above, storage and throughput wise it's not an efficient way to deploy nor serve a web app. Limited functionality. The vast majority of apps will work fine, but there are some edge cases that are not yet handled.","title":"Streaming Apps"},{"location":"frontend-deployment/#streaming-app-configuration","text":"Another great thing about streaming apps is that they require no changes to your frontend! It's simply some additional config in the compilation process, specifically the streamConfig attribute. This can go either at root or target level in your sasjsconfig.json file. The relevant attributes are: streamWeb - set to true to create the streaming app as part of the sasjs compile process. webSourcePath - the local folder containing the built version of the app. If you are writing vanilla js, it's just the folder containing your index.html . For React/Angular, it could be your dist or build folder. streamServiceName - the name of the service containing the index.html . This is a SAS service named clickme by default. streamWebFolder - the name of the SAS logical folder under which all the web content will be stored.","title":"Streaming App Configuration"},{"location":"frontend-deployment/#streaming-app-compilation","text":"When running sasjs web (also executed as part of sasjs compile ), the SASjs CLI will open up the index.html in the webSourcePath folder and migrate a copy of every dependency (JS, CSS, images, sounds, etc) into the sasjsbuild/services/$(streamWebFolder) folder. For SAS 9, all content will be converted into Stored Processes. This is achieved by base64 encoding the content and streaming it back with the appropriate content-type. For Viya, content is deployed as actual files in SAS Drive. This is a lot more space efficient. In addition, to avoid the issue with Viya-streamed files whereby a redirect occurs to a temporary UUID from the files service, we call the index.html with an extra parameter - _debug=2 . This wraps the response in an iframe, and by embedding some extra attributes, we surface the child contents so it looks like the main page, however a user-friendly URL is retained. To clarify - all you need to do to achieve the above is run sasjs compile .","title":"Streaming App Compilation"},{"location":"frontend-deployment/#streaming-app-build","text":"The build process takes all the compiled content in the sasjsbuild folder and turns it into a build pack. The build pack comes in two forms: JSON file (used exclusively when autodeploying to SAS Viya using the REST APIs) SAS file (can be used by both SAS 9 or Viya to deploy all content programmatically) The build pack is created by running sasjs build . The name of the pack is determined by the buildOutputFileName attribute, and takes the target name by default.","title":"Streaming App Build"},{"location":"frontend-deployment/#streaming-app-deployment","text":"One way to deploy a streamed app is to simply run the generated SAS file. If you can host this somewhere, you can deploy a SAS App to any customer with just two lines of code - here's an example . Using this approach, the link to the final app will be shown in the SAS log. For automated (CI/CD) development, you will probably want to do this using the command line. For that you will need to ensure the deployServicePack attribute is true . With this, you can autodeploy by simply running sasjs deploy . The link to the final app will be shown in the console. Note - you will first need to have authenticated to your SAS server using sasjs auth .","title":"Streaming App Deployment"},{"location":"frontend-deployment/#desktop-apps","text":"Another option for building apps is to actually host them on the desktop. Using technologies such as Electron, or React Native, you can build apps that are saved on the users desktop or mobile device. This will again require server whitelisting, the use of a CLIENT/SECRET, or a dedicated (Third party) web server.","title":"Desktop Apps"},{"location":"frontend-getstarted/","text":"Adding a frontend to your analytics project provides limitless potential for creating bespoke user experiences for decision support. There are many ways to create HTML interfaces with SAS, and we support all of them EXCEPT ONE. The approach we don't support is one that the vast majority of SAS app developers will be familiar with - and that is, to write SAS code to stream web outputs . The two most common techniques for achieving this are: Data step put statements (an apostrophe catastrophe) Proc stream (&it will test your resolve) Both of these are BAD options for creating user interfaces. Whilst you (as the original developer) might find yourself making good progress initially, embedding JS logic with SAS logic, as soon as your app starts to get more complex - you will spend more and more time debugging minor changes. It will cost more to add new features, and it will be very difficult for anyone else to maintain (even you, after a short break). Far, far better is to maintain a complete separation of frontend (web) and backend (SAS) code. This approach also means that you can have your frontend built/maintained by a frontend developer (easy to find) and the backend maintained by a regular SAS dev (easy to find). We call SAS developers with frontend skills UNICORNS They don't really exist! Either a frontend developer has adopted some basic SAS skills, or a SAS developer has learned some javascript. Very few developers are truly proficient in both. So do yourself, your project, and your colleagues a favour - enforce complete seperation between the frontend and backend. Working Locally \u00b6 It's common for web developers to build & test the frontend locally , on a desktop. This means spinning up a server on your own machine ( localhost ) and using that to connect to SAS. This is convenient, but will typically require bypassing some security settings by enabling cors in your browser. If you are using the SASjs Adapter with this approach, you will also need to supply the serverUrl property - as will not be possible to determine the location of the SAS server from the URL. Note that this may not be possible if there is whitelisting on the SAS Server - for that you will need to either ask your admin to change the setting, or make use of one of the deployment options.","title":"Get Started"},{"location":"frontend-getstarted/#working-locally","text":"It's common for web developers to build & test the frontend locally , on a desktop. This means spinning up a server on your own machine ( localhost ) and using that to connect to SAS. This is convenient, but will typically require bypassing some security settings by enabling cors in your browser. If you are using the SASjs Adapter with this approach, you will also need to supply the serverUrl property - as will not be possible to determine the location of the SAS server from the URL. Note that this may not be possible if there is whitelisting on the SAS Server - for that you will need to either ask your admin to change the setting, or make use of one of the deployment options.","title":"Working Locally"},{"location":"glossary/","text":"Glossary \u00b6 If you'd like to see a new item added, feel free to raise an issue or PR ! appLoc \u00b6 Relevant to: Adapter, CLI, VSCE The \"appLoc\" represents the \"app location\" in terms of where the backend web services are stored in the logical folder tree (eg SAS Drive on Viya, or metadata in SAS 9). It does not represent a physical path, such as a linux directory or windows folder. It's more analagous to WebDav (collection of parent/child relationships). The appLoc will be deployed with the following structure (folders will only be created if relevant artefacts are compiled): $(appLoc)/services/(subfolder) $(appLoc)/jobs/(subfolder) $(appLoc)/tests/macros $(appLoc/tests/jobs $(appLoc/tests/services Adapter Specific guidance \u00b6 By defining the appLoc in the SASjs config, the sasjs.request() method can use a relative path (without leading slash), meaning that the app can be easily moved (or deployed elsewhere). If the request() method is used with a leading slash, the appLoc is ignored. If request() is used without a leading slash, the appLoc must be provided in the sasjs config object. Includes \u00b6 Relevant to: CLI, VSCE SAS Includes (coming from the programFolders array) can be inserted into any Primary Artefact (Job or Service or Test). They are essentially 'arbitrary code blocks'. More information available here Macros \u00b6 Relevant to: CLI, VSCE SAS Macros (coming from the macroFolders array) should be in a file with the same name as the macro itself. Each macro file should contain just one macro. Macros can be compiled into multiple artefacts. More information here . Programs \u00b6 See includes . Job \u00b6 Relevant to: CLI, VSCE A \"Job\" in SASjs (coming from the jobFolders array) relates to a batch program, which has one or more Data Inputs and (ideally) one Data Output. It is one of the three Primary Artefacts . Additional programs and macros may be compiled as precode. Jobs may take a long time to execute. Lineage can be generated for jobs using the sasjs doc command (so long as the correct headers are set). Service \u00b6 Relevant to: Adapter, CLI, VSCE A \"Service\" in SASjs (coming from the serviceFolders array) relates to an 'on demand' process with zero or more Service Inputs and one or more Service Outputs. Those inputs/outputs can be anything, but are typically JSON. Services should be designed to run as fast as possible, and never longer than 5 minutes (a common timeout threshold) When services are compiled, additional precode is added to enable the %webout() macro. This macro converts adapter inputs to WORK tables, and allows further WORK tables to be sent back in a specific JSON format. Depending on the serverType , the underlying webout macro is either: mm_webout.sas (used for SAS9 EBI) ms_webout.sas (used for SASjs Server) mv_webout.sas (used for Viya) Target \u00b6 Relevant to: CLI, VSCE A Target in SASjs represents a configuration against which the app will be deployed. Example items for a configuration include: serverType (eg SAS9, SASJS, SASVIYA) serverUrl (the url of the server) appLoc (the logical folder to which the SAS web services will be deployed) Test \u00b6 Relevant to: CLI Tests can be written for Jobs, Services, or Macros. They are compiled as Services to enable the webout() macro for sending the test results. More information on tests is available here","title":"Glossary"},{"location":"glossary/#glossary","text":"If you'd like to see a new item added, feel free to raise an issue or PR !","title":"Glossary"},{"location":"glossary/#apploc","text":"Relevant to: Adapter, CLI, VSCE The \"appLoc\" represents the \"app location\" in terms of where the backend web services are stored in the logical folder tree (eg SAS Drive on Viya, or metadata in SAS 9). It does not represent a physical path, such as a linux directory or windows folder. It's more analagous to WebDav (collection of parent/child relationships). The appLoc will be deployed with the following structure (folders will only be created if relevant artefacts are compiled): $(appLoc)/services/(subfolder) $(appLoc)/jobs/(subfolder) $(appLoc)/tests/macros $(appLoc/tests/jobs $(appLoc/tests/services","title":"appLoc"},{"location":"glossary/#adapter-specific-guidance","text":"By defining the appLoc in the SASjs config, the sasjs.request() method can use a relative path (without leading slash), meaning that the app can be easily moved (or deployed elsewhere). If the request() method is used with a leading slash, the appLoc is ignored. If request() is used without a leading slash, the appLoc must be provided in the sasjs config object.","title":"Adapter Specific guidance"},{"location":"glossary/#includes","text":"Relevant to: CLI, VSCE SAS Includes (coming from the programFolders array) can be inserted into any Primary Artefact (Job or Service or Test). They are essentially 'arbitrary code blocks'. More information available here","title":"Includes"},{"location":"glossary/#macros","text":"Relevant to: CLI, VSCE SAS Macros (coming from the macroFolders array) should be in a file with the same name as the macro itself. Each macro file should contain just one macro. Macros can be compiled into multiple artefacts. More information here .","title":"Macros"},{"location":"glossary/#programs","text":"See includes .","title":"Programs"},{"location":"glossary/#job","text":"Relevant to: CLI, VSCE A \"Job\" in SASjs (coming from the jobFolders array) relates to a batch program, which has one or more Data Inputs and (ideally) one Data Output. It is one of the three Primary Artefacts . Additional programs and macros may be compiled as precode. Jobs may take a long time to execute. Lineage can be generated for jobs using the sasjs doc command (so long as the correct headers are set).","title":"Job"},{"location":"glossary/#service","text":"Relevant to: Adapter, CLI, VSCE A \"Service\" in SASjs (coming from the serviceFolders array) relates to an 'on demand' process with zero or more Service Inputs and one or more Service Outputs. Those inputs/outputs can be anything, but are typically JSON. Services should be designed to run as fast as possible, and never longer than 5 minutes (a common timeout threshold) When services are compiled, additional precode is added to enable the %webout() macro. This macro converts adapter inputs to WORK tables, and allows further WORK tables to be sent back in a specific JSON format. Depending on the serverType , the underlying webout macro is either: mm_webout.sas (used for SAS9 EBI) ms_webout.sas (used for SASjs Server) mv_webout.sas (used for Viya)","title":"Service"},{"location":"glossary/#target","text":"Relevant to: CLI, VSCE A Target in SASjs represents a configuration against which the app will be deployed. Example items for a configuration include: serverType (eg SAS9, SASJS, SASVIYA) serverUrl (the url of the server) appLoc (the logical folder to which the SAS web services will be deployed)","title":"Target"},{"location":"glossary/#test","text":"Relevant to: CLI Tests can be written for Jobs, Services, or Macros. They are compiled as Services to enable the webout() macro for sending the test results. More information on tests is available here","title":"Test"},{"location":"guide-sas9/","text":"SAS9 \u00b6 Where is my Server? \u00b6 If you're on a new site, you don't always know where your SAS Server is! There are two options to find out programmatically: METADATA_GETURI \u00b6 Probably the quickest and easiest: data _null_ ; length url $ 128 .; call missing (url); rc = METADATA_GETURI( \"Stored Process Web App\" ,url); put url=; run; mm_getwebappsrvprops \u00b6 This macro gets a bunch of properties relating to web servers, however it's possible that access may be restricted, depending on the metadata permissions at your site. %mm_getwebappsrvprops (outds= some_ds) data _null_ ; set some_ds( where =(name= 'webappsrv.server.url' )); put value=; run; Load Balancing \u00b6 The SAS Load Balancer comes with 3 parallel (multibridge) connections by default. This must be increased! A good minimum is 5-10 per CPU core.","title":"Guide sas9"},{"location":"guide-sas9/#sas9","text":"","title":"SAS9"},{"location":"guide-sas9/#where-is-my-server","text":"If you're on a new site, you don't always know where your SAS Server is! There are two options to find out programmatically:","title":"Where is my Server?"},{"location":"guide-sas9/#metadata_geturi","text":"Probably the quickest and easiest: data _null_ ; length url $ 128 .; call missing (url); rc = METADATA_GETURI( \"Stored Process Web App\" ,url); put url=; run;","title":"METADATA_GETURI"},{"location":"guide-sas9/#mm_getwebappsrvprops","text":"This macro gets a bunch of properties relating to web servers, however it's possible that access may be restricted, depending on the metadata permissions at your site. %mm_getwebappsrvprops (outds= some_ds) data _null_ ; set some_ds( where =(name= 'webappsrv.server.url' )); put value=; run;","title":"mm_getwebappsrvprops"},{"location":"guide-sas9/#load-balancing","text":"The SAS Load Balancer comes with 3 parallel (multibridge) connections by default. This must be increased! A good minimum is 5-10 per CPU core.","title":"Load Balancing"},{"location":"guide-viya/","text":"Viya \u00b6 SAS Viya is the new kid on the block and the future for the SAS platform. It has a blazingly fast in-memory, scalable architecture and is built with developers in mind. Here are some relevant tips & tricks to help from an app-development perspective. Server Restart \u00b6 This is necessary after configuring settings such as whitelisting. Log onto the box as an admin and execute the following commands: sudo /etc/init.d/sas-viya-all-services stop # open top or htop and kill any redundant / remaining SAS processes sudo /etc/init.d/sas-viya-all-services start Shared Account and Server re-use \u00b6 Server pooling and the use of a shared OS account are both possible from Viya 3.5 - the documentation is here (and communities articles are available here and here ) Compute setup \u00b6 If running on the SAS box, first source /opt/sas/viya/config/consul.conf to set the SSL_CERT_FILE. Next, navigate to /opt/sas/viya/home/bin . To create your profile (if you haven't done this already) run ./sas-admin profile init . Then, ./sas-admin auth login to authenticate (with your own credentials). Next, ./sas-admin compute credentials create and use the credentials you would like the new compute context to use (the equivalent of the SAS 9 sassrv account). To validate, you should see these creds on the /credentials/domains?start=10 endpoint. Now run the following command: sudo systemctl restart sas-viya-runlauncher-default Next up, log onto SASEnvironment Manager (as admin user), Contexts, View Compute Contexts. You can either create a new profile, or modify the existing \"SAS Job Execution compute context\". Scroll down and add the following attribute / value pairs: Status Attribute Value Mandatory runServerAs the user id we used in the ./sas-admin compute credentials create step above Mandatory reuseServerProcesses true Optional serverInactiveTimeout Time in seconds before the server times out. Will otherwise time out when there are no active sessions. Default is 600 (10 mins). We recommend 1800 or longer. Optional allowXCMD true or false Optional unsafeJobCharacters Contains the characters that the compute session should remove from any variable that is provided to a job for execution. By default, the following characters are removed: & (ampersand), \u201d (double quotation mark), ; (semicolon), \u2019 (single quotation mark), and % (percent sign). If set to \"\" the feature is disabled. With this feature enabled, your end user ID will be SYS_COMPUTE_SESSION_OWNER instead of SYSUSERID . Note - a server restart is not required. REST APIs \u00b6 The REST APIs are available here: https://developer.sas.com/apis/rest/ . When navigating the APIs, the returned JSON can be quite difficult to read: Fortunately, plugins are available for chrome and firefox that can give you \"prettified\" JSON, like so:","title":"Guide viya"},{"location":"guide-viya/#viya","text":"SAS Viya is the new kid on the block and the future for the SAS platform. It has a blazingly fast in-memory, scalable architecture and is built with developers in mind. Here are some relevant tips & tricks to help from an app-development perspective.","title":"Viya"},{"location":"guide-viya/#server-restart","text":"This is necessary after configuring settings such as whitelisting. Log onto the box as an admin and execute the following commands: sudo /etc/init.d/sas-viya-all-services stop # open top or htop and kill any redundant / remaining SAS processes sudo /etc/init.d/sas-viya-all-services start","title":"Server Restart"},{"location":"guide-viya/#shared-account-and-server-re-use","text":"Server pooling and the use of a shared OS account are both possible from Viya 3.5 - the documentation is here (and communities articles are available here and here )","title":"Shared Account and Server re-use"},{"location":"guide-viya/#compute-setup","text":"If running on the SAS box, first source /opt/sas/viya/config/consul.conf to set the SSL_CERT_FILE. Next, navigate to /opt/sas/viya/home/bin . To create your profile (if you haven't done this already) run ./sas-admin profile init . Then, ./sas-admin auth login to authenticate (with your own credentials). Next, ./sas-admin compute credentials create and use the credentials you would like the new compute context to use (the equivalent of the SAS 9 sassrv account). To validate, you should see these creds on the /credentials/domains?start=10 endpoint. Now run the following command: sudo systemctl restart sas-viya-runlauncher-default Next up, log onto SASEnvironment Manager (as admin user), Contexts, View Compute Contexts. You can either create a new profile, or modify the existing \"SAS Job Execution compute context\". Scroll down and add the following attribute / value pairs: Status Attribute Value Mandatory runServerAs the user id we used in the ./sas-admin compute credentials create step above Mandatory reuseServerProcesses true Optional serverInactiveTimeout Time in seconds before the server times out. Will otherwise time out when there are no active sessions. Default is 600 (10 mins). We recommend 1800 or longer. Optional allowXCMD true or false Optional unsafeJobCharacters Contains the characters that the compute session should remove from any variable that is provided to a job for execution. By default, the following characters are removed: & (ampersand), \u201d (double quotation mark), ; (semicolon), \u2019 (single quotation mark), and % (percent sign). If set to \"\" the feature is disabled. With this feature enabled, your end user ID will be SYS_COMPUTE_SESSION_OWNER instead of SYSUSERID . Note - a server restart is not required.","title":"Compute setup"},{"location":"guide-viya/#rest-apis","text":"The REST APIs are available here: https://developer.sas.com/apis/rest/ . When navigating the APIs, the returned JSON can be quite difficult to read: Fortunately, plugins are available for chrome and firefox that can give you \"prettified\" JSON, like so:","title":"REST APIs"},{"location":"images/","text":"Images \u00b6 If you are hosting your web app on a web server (like you should) then there is really not much to consider regarding images, other than for you to minimise file sizes to improve app load times. Images are often cached so subsequent loads are less of an issue. If you are streaming HTML from SAS though, images are more of a challenge. This is where base64 encoding comes in. Essentially this technique lets you save an image as a long string. There are many online services that will convert an image into a Base64 string for you, eg: https://base64.guru/converter/encode/image . When streaming through the SAS _webout fileref, be aware that you are likely to hit the line length restriction. To avoid this, set a large value for lrecl or ensure that your data is streamed byte by byte. If you use the sasjs-cli tool, this part will be handled for you.","title":"Images"},{"location":"images/#images","text":"If you are hosting your web app on a web server (like you should) then there is really not much to consider regarding images, other than for you to minimise file sizes to improve app load times. Images are often cached so subsequent loads are less of an issue. If you are streaming HTML from SAS though, images are more of a challenge. This is where base64 encoding comes in. Essentially this technique lets you save an image as a long string. There are many online services that will convert an image into a Base64 string for you, eg: https://base64.guru/converter/encode/image . When streaming through the SAS _webout fileref, be aware that you are likely to hit the line length restriction. To avoid this, set a large value for lrecl or ensure that your data is streamed byte by byte. If you use the sasjs-cli tool, this part will be handled for you.","title":"Images"},{"location":"log-parser/","text":"Log parser \u00b6 You can use this tool to parse SAS Viya logs from JSON to plain text format. Everything is parsed locally (in the browser) however if you'd like to be super safe you can deploy a version in your own environment here . button { background: #eeeeee; padding: 10px; cursor: pointer; border-radius: 4px; } button:hover { background: #e6e6e6; } button:focus { outline: none } textarea { padding: 5px; } pre { padding: 5px; border: 1px solid #b2b2b2; border-radius: 3px; overflow: auto; max-height: 80vh; } .md-sidebar--secondary { display: none; } .md-content { width: 80% !important; max-width: 80% !important; } Parse log Plain text log No log parsed yet. function htmlEncode(str) { const el = document.createElement('div') el.innerText = el.textContent = str str = el.innerHTML return str } const parseLogLines = () => { const logText = document.querySelector('#log_text').value let logLines = '' if (logText) { try { const logJson = JSON.parse(logText) for (let item of logJson.items) { logLines += `${htmlEncode(item.line)}\\n` } } catch (err) { alert(`Error while parsing provided log.${err ? `\\n${err}` : '' }`) } } if (logLines) { document.querySelector('#log_result').innerHTML = logLines document.querySelector('#log_text').value = '' } else if (logText) { alert(`Error while parsing provided log.`) } }","title":"Viya Log Parser"},{"location":"log-parser/#log-parser","text":"You can use this tool to parse SAS Viya logs from JSON to plain text format. Everything is parsed locally (in the browser) however if you'd like to be super safe you can deploy a version in your own environment here . button { background: #eeeeee; padding: 10px; cursor: pointer; border-radius: 4px; } button:hover { background: #e6e6e6; } button:focus { outline: none } textarea { padding: 5px; } pre { padding: 5px; border: 1px solid #b2b2b2; border-radius: 3px; overflow: auto; max-height: 80vh; } .md-sidebar--secondary { display: none; } .md-content { width: 80% !important; max-width: 80% !important; } Parse log","title":"Log parser"},{"location":"react/","text":"React \u00b6 The React seed app is based on create-react-app with some additional components, eg for handling the SAS login and the history of requests. The repo is here: https://github.com/sasjs/react-seed-app . Additional apps (and tools) can be found here: https://sasjs.io/apps/ .","title":"React"},{"location":"react/#react","text":"The React seed app is based on create-react-app with some additional components, eg for handling the SAS login and the history of requests. The repo is here: https://github.com/sasjs/react-seed-app . Additional apps (and tools) can be found here: https://sasjs.io/apps/ .","title":"React"},{"location":"releasing/","text":"Releasing \u00b6 If you have followed the conventional-commit standard you can now generate a version number according to sementic-versioning along with relevant release notes. There are two great command-line tools for managing a release: 1) standard-version - will generate a CHANGELOG and the version number but won't push the release 2) semantic-release - will manage everything including the release. A great guide is available here","title":"Releasing"},{"location":"releasing/#releasing","text":"If you have followed the conventional-commit standard you can now generate a version number according to sementic-versioning along with relevant release notes. There are two great command-line tools for managing a release: 1) standard-version - will generate a CHANGELOG and the version number but won't push the release 2) semantic-release - will manage everything including the release. A great guide is available here","title":"Releasing"},{"location":"resources/","text":"Resources \u00b6 Github Repos \u00b6 SASjs is MIT open source and free for commercial use. If you like our code, feel free to fork / leave a star! Macro Core github Library SASjs adapter SASJS-CLI commandline tool Minimal seed app REACT seed app Angular seed app Documentation sites \u00b6 Websites created as technical / user documentation: sasjs/adapter documentation sasjs/cli documentation sasjs/core documentation sasjs/server documentation Data Controller documentation Data Controller code documentation Other Useful Websites \u00b6 SGF 2021 - Building & Deploying Web Apps with SASjs CLI SGF 2021 - Scaffolding SAS Projects with NPM and SASjs Guide to building and extending an Angular Web App on Viya Guide to building a Vanilla Javascript App on SAS 9 or Viya Building apps rapidly with SASjs SESUG 2020 - Building SAS-Powered Web Apps with SASjs Slides to Build A HTML5 App Using SAS Viya REST API documentation Overview of SASjs lint on SAS Blogs Videos \u00b6 A number of videos are available to explain the different parts of the framework - just visit https://sasjs.io/videos","title":"Online Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#github-repos","text":"SASjs is MIT open source and free for commercial use. If you like our code, feel free to fork / leave a star! Macro Core github Library SASjs adapter SASJS-CLI commandline tool Minimal seed app REACT seed app Angular seed app","title":"Github Repos"},{"location":"resources/#documentation-sites","text":"Websites created as technical / user documentation: sasjs/adapter documentation sasjs/cli documentation sasjs/core documentation sasjs/server documentation Data Controller documentation Data Controller code documentation","title":"Documentation sites"},{"location":"resources/#other-useful-websites","text":"SGF 2021 - Building & Deploying Web Apps with SASjs CLI SGF 2021 - Scaffolding SAS Projects with NPM and SASjs Guide to building and extending an Angular Web App on Viya Guide to building a Vanilla Javascript App on SAS 9 or Viya Building apps rapidly with SASjs SESUG 2020 - Building SAS-Powered Web Apps with SASjs Slides to Build A HTML5 App Using SAS Viya REST API documentation Overview of SASjs lint on SAS Blogs","title":"Other Useful Websites"},{"location":"resources/#videos","text":"A number of videos are available to explain the different parts of the framework - just visit https://sasjs.io/videos","title":"Videos"},{"location":"sasjs-adapter/","text":"SASjs Adapter \u00b6 The SASjs adapter is a JS library and a set of SAS Macros that handle the communication between the frontend app and backend SAS services. There are three parts to consider: JS request / response SAS inputs / outputs Configuration JS Request / Response \u00b6 To install the library you can simply run npm install @sasjs/adapter or include a <script> tag with a reference to our CDN . Full technical documentation is available here . The main parts are: Instantiation \u00b6 The following code will instantiate an instance of the adapter: let sasJs = new SASjs . default ( { appLoc : \"/Your/SAS/Folder\" , serverType : \"SAS9\" } ); More on the config later. SAS Logon \u00b6 The login process can be handled directly, as below, or as a callback function to a SAS request. sasJs . logIn ( 'USERNAME' , 'PASSWORD' ). then (( response ) => { if ( response . isLoggedIn === true ) { console . log ( 'do stuff' ) } else { console . log ( 'do other stuff' ) } } Request / Response \u00b6 A simple request can be sent to SAS in the following fashion: sasJs . request ( \"/path/to/my/service\" , dataObject ) . then (( response ) => { // all tables are in the response object, eg: console . log ( response . tablewith2cols1row [ 0 ]. COL1 . value ) }) We supply the path to the SAS service, and a data object. The data object can be null (for services with no input), or can contain one or more tables in the following format: let dataObject = { \"tablewith2cols1row\" : [{ \"col1\" : \"val1\" , \"col2\" : 42 }], \"tablewith1col2rows\" : [{ \"col\" : \"row1\" }, { \"col\" : \"row2\" }] }; There are optional parameters such as a config object and a callback login function. The response object will contain returned tables and columns. Table names are always lowercase, and column names uppercase. The adapter will also cache the logs (if debug enabled) and even the work tables. For performance, it is best to keep debug mode off. SAS Inputs / Outputs \u00b6 The SAS side is handled by a number of macros in the macro core library. The following snippet shows the process of SAS tables arriving / leaving: /* fetch all input tables sent from frontend - they arrive as work tables */ %webout (FETCH) /* some sas code */ data some sas tables; set from js ; run; %webout (OPEN) /* open the JSON to be returned */ %webout (OBJ,some) /* `some` table is sent in object format */ %webout (ARR,sas) /* `sas` table is sent in array format, smaller filesize */ %webout (OBJ,tables,fmt=N) /* unformatted (raw) data */ %webout (OBJ,tables,dslabel=newtable) /* rename tables on export */ %webout (OBJ,tables,dslabel=truncated, maxobs= 10 ) /* send back max 10 rows */ %webout (CLOSE) /* close the JSON and send some extra useful variables too */ Configuration \u00b6 Configuration on the client side involves passing an object on startup, which can also be passed with each request. Technical documentation on the SASjsConfig class is available here . The main config items are: appLoc - this is the folder under which the SAS services will be created. serverType - either SAS9 or SASVIYA . serverUrl - the location (including http protocol and port) of the SAS Server. Can be omitted, eg if serving directly from the SAS Web Server, or in streaming mode. debug - if true then SAS Logs and extra debug information is returned. useComputeApi - if true and the serverType is SASVIYA then the REST APIs will be called directly (rather than using the JES web service). contextName - if missing or blank, and useComputeApi is true and serverType is SASVIYA then the JES API will be used. The adapter supports a number of approaches for interfacing with Viya ( serverType is SASVIYA ). For maximum performance, be sure to configure your compute context with reuseServerProcesses as true and a system account in runServerAs . This functionality is available since Viya 3.5. This configuration is supported when creating contexts using the CLI . Using JES Web App \u00b6 In this setup, all requests are routed through the JES web app, at YOURSERVER/SASJobExecution . This is the most reliable method, and also the slowest. One request is made to the JES app, and remaining requests (getting job uri, session spawning, passing parameters, running the program, fetching the log) are made on the SAS server by the JES app. { appLoc:\"/Your/Path\", serverType:\"SASVIYA\" } Using the JES API \u00b6 Here we are running Jobs using the Job Execution Service except this time we are making the requests directly using the REST API instead of through the JES Web App. This is helpful when we need to call web services outside of a browser (eg with the SASjs CLI or other commandline tools). To save one network request, the adapter prefetches the JOB URIs and passes them in the __job parameter. { appLoc:\"/Your/Path\", serverType:\"SASVIYA\", useComputeApi: true } Using the Compute API \u00b6 This approach is by far the fastest, as a result of the optimisations we have built into the adapter. With this configuration, in the first sasjs request, we take a URI map of the services in the target folder, and create a session manager - which spawns an extra session. The next time a request is made, the adapter will use the 'hot' session. Sessions are deleted after every use, which actually makes this less resource intensive than a typical JES web app, in which all sessions are kept alive by default for 15 minutes. { appLoc:\"/Your/Path\", serverType:\"SASVIYA\", useComputeApi: true, contextName: 'yourComputeContext' }","title":"Adapter"},{"location":"sasjs-adapter/#sasjs-adapter","text":"The SASjs adapter is a JS library and a set of SAS Macros that handle the communication between the frontend app and backend SAS services. There are three parts to consider: JS request / response SAS inputs / outputs Configuration","title":"SASjs Adapter"},{"location":"sasjs-adapter/#js-request-response","text":"To install the library you can simply run npm install @sasjs/adapter or include a <script> tag with a reference to our CDN . Full technical documentation is available here . The main parts are:","title":"JS Request / Response"},{"location":"sasjs-adapter/#instantiation","text":"The following code will instantiate an instance of the adapter: let sasJs = new SASjs . default ( { appLoc : \"/Your/SAS/Folder\" , serverType : \"SAS9\" } ); More on the config later.","title":"Instantiation"},{"location":"sasjs-adapter/#sas-logon","text":"The login process can be handled directly, as below, or as a callback function to a SAS request. sasJs . logIn ( 'USERNAME' , 'PASSWORD' ). then (( response ) => { if ( response . isLoggedIn === true ) { console . log ( 'do stuff' ) } else { console . log ( 'do other stuff' ) } }","title":"SAS Logon"},{"location":"sasjs-adapter/#request-response","text":"A simple request can be sent to SAS in the following fashion: sasJs . request ( \"/path/to/my/service\" , dataObject ) . then (( response ) => { // all tables are in the response object, eg: console . log ( response . tablewith2cols1row [ 0 ]. COL1 . value ) }) We supply the path to the SAS service, and a data object. The data object can be null (for services with no input), or can contain one or more tables in the following format: let dataObject = { \"tablewith2cols1row\" : [{ \"col1\" : \"val1\" , \"col2\" : 42 }], \"tablewith1col2rows\" : [{ \"col\" : \"row1\" }, { \"col\" : \"row2\" }] }; There are optional parameters such as a config object and a callback login function. The response object will contain returned tables and columns. Table names are always lowercase, and column names uppercase. The adapter will also cache the logs (if debug enabled) and even the work tables. For performance, it is best to keep debug mode off.","title":"Request / Response"},{"location":"sasjs-adapter/#sas-inputs-outputs","text":"The SAS side is handled by a number of macros in the macro core library. The following snippet shows the process of SAS tables arriving / leaving: /* fetch all input tables sent from frontend - they arrive as work tables */ %webout (FETCH) /* some sas code */ data some sas tables; set from js ; run; %webout (OPEN) /* open the JSON to be returned */ %webout (OBJ,some) /* `some` table is sent in object format */ %webout (ARR,sas) /* `sas` table is sent in array format, smaller filesize */ %webout (OBJ,tables,fmt=N) /* unformatted (raw) data */ %webout (OBJ,tables,dslabel=newtable) /* rename tables on export */ %webout (OBJ,tables,dslabel=truncated, maxobs= 10 ) /* send back max 10 rows */ %webout (CLOSE) /* close the JSON and send some extra useful variables too */","title":"SAS Inputs / Outputs"},{"location":"sasjs-adapter/#configuration","text":"Configuration on the client side involves passing an object on startup, which can also be passed with each request. Technical documentation on the SASjsConfig class is available here . The main config items are: appLoc - this is the folder under which the SAS services will be created. serverType - either SAS9 or SASVIYA . serverUrl - the location (including http protocol and port) of the SAS Server. Can be omitted, eg if serving directly from the SAS Web Server, or in streaming mode. debug - if true then SAS Logs and extra debug information is returned. useComputeApi - if true and the serverType is SASVIYA then the REST APIs will be called directly (rather than using the JES web service). contextName - if missing or blank, and useComputeApi is true and serverType is SASVIYA then the JES API will be used. The adapter supports a number of approaches for interfacing with Viya ( serverType is SASVIYA ). For maximum performance, be sure to configure your compute context with reuseServerProcesses as true and a system account in runServerAs . This functionality is available since Viya 3.5. This configuration is supported when creating contexts using the CLI .","title":"Configuration"},{"location":"sasjs-adapter/#using-jes-web-app","text":"In this setup, all requests are routed through the JES web app, at YOURSERVER/SASJobExecution . This is the most reliable method, and also the slowest. One request is made to the JES app, and remaining requests (getting job uri, session spawning, passing parameters, running the program, fetching the log) are made on the SAS server by the JES app. { appLoc:\"/Your/Path\", serverType:\"SASVIYA\" }","title":"Using JES Web App"},{"location":"sasjs-adapter/#using-the-jes-api","text":"Here we are running Jobs using the Job Execution Service except this time we are making the requests directly using the REST API instead of through the JES Web App. This is helpful when we need to call web services outside of a browser (eg with the SASjs CLI or other commandline tools). To save one network request, the adapter prefetches the JOB URIs and passes them in the __job parameter. { appLoc:\"/Your/Path\", serverType:\"SASVIYA\", useComputeApi: true }","title":"Using the JES API"},{"location":"sasjs-adapter/#using-the-compute-api","text":"This approach is by far the fastest, as a result of the optimisations we have built into the adapter. With this configuration, in the first sasjs request, we take a URI map of the services in the target folder, and create a session manager - which spawns an extra session. The next time a request is made, the adapter will use the 'hot' session. Sessions are deleted after every use, which actually makes this less resource intensive than a typical JES web app, in which all sessions are kept alive by default for 15 minutes. { appLoc:\"/Your/Path\", serverType:\"SASVIYA\", useComputeApi: true, contextName: 'yourComputeContext' }","title":"Using the Compute API"},{"location":"sasjs-cli/","text":"SASJS-CLI \u00b6 The CLI tool fulfills a number of purposes: Creation of a project repository in an 'opinionated' way Compilation each service, including all the dependent macros / macro variables and pre / post code Build - creation of the master SAS deployment, including build macros, macro variables, and pre/post code Deployment - tools and utilities for server management and deployment directly from GIT and command line Full documentation for the CLI is available at https://cli.sasjs.io Demo \u00b6 SASjs was presented to the SAS User Group UK & Ireland in March 2020 as an approach for deploying, executing & scheduling viya jobs. The video is available below.","title":"CLI"},{"location":"sasjs-cli/#sasjs-cli","text":"The CLI tool fulfills a number of purposes: Creation of a project repository in an 'opinionated' way Compilation each service, including all the dependent macros / macro variables and pre / post code Build - creation of the master SAS deployment, including build macros, macro variables, and pre/post code Deployment - tools and utilities for server management and deployment directly from GIT and command line Full documentation for the CLI is available at https://cli.sasjs.io","title":"SASJS-CLI"},{"location":"sasjs-cli/#demo","text":"SASjs was presented to the SAS User Group UK & Ireland in March 2020 as an approach for deploying, executing & scheduling viya jobs. The video is available below.","title":"Demo"},{"location":"sasjs-core/","text":"MacroCore Library \u00b6 The MacroCore library provides routines and helpers for use in SAS side application logic and deployments. It is divided into 5 sections: BASE - Macro functions ( mf_* ) and macro procedures ( mp_* ) that can be used in all flavours of SAS. No XCMD is assumed. META - Macros ( mm_* ) that interface with SAS 9 metadata. No XCMD assumed. METAX - Metadata macros that depend on XCMD, eg those interfacing with the Batch tools. VIYA - Macros that interface with SAS Viya. No XCMD assumed. Check out the source code and documentation . Installation \u00b6 The easest way to make these macros available is to just include them in your session as follows: filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; If you don't have internet access from your SAS session, you can download the macros directly from here and place them in your autoexec, or initialisation file. A further option might be to git clone the repository, and set up sasautos, eg: options insert =(sasautos= \"/your/path/macrocore/base\" )); options insert =(sasautos= \"/your/path/macrocore/meta\" )); The final deployment option, if you are building web apps, is Node Package Manager - simply run npm install @sasjs/core in your project repository. Using sasjs-cli you can compile these macros into your web services at build time, and lock them to a particular release. Useful Features \u00b6 Generating Viya Client & Secret in SAS Studio \u00b6 The CORE library can be used by an administrator to register a Viya Client & Secret. Execute the following: filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; /* create random client and secret */ %mv_registerclient (outds=clientinfo) This will generate a URL in the log, which must be followed to generate a refresh code (one time step). Paste that code into the macro below: /* paste the code below */ %mv_tokenauth(inds=clientinfo,code=xET8ETs74z) There is now a table in the WORK library containing the access token. The clientinfo table contains the client & secret. A convenient (but insecure) way to extract these details to the log: /* extract client, secret & token to the log */ data _null_; merge mv_tokenauth clientinfo(drop=error); put access_token=; put refresh_token=; put client_id=; put client_secret=; run; Warning Security tokens are like passwords. The above is provided for convenience, but you should avoid writing tokens to log files unless you are very sure of your environment. Calling SAS Viya from SAS 9 \u00b6 When calling SAS Viya from SAS 9, the oauth_bearer=sas_services option is not available. However it is still possible to call the APIs in SAS 9 with proc http in the core library by putting the ACCESS_TOKEN in a macro variable and referring to that variable in the access_token_var= keyword parameter of each viya macro (starting mv_ ). Warning Saving security tokens in project repositories, especially if they are committed to source control, is a security risk - as anyone with access can use them to make modifications on the Viya platform. Be sure to use a secure mechanism such as the %inc from a secure directory, or another approved mechanism for securing these kinds of variables. Avoid writing Access Tokens to log files.","title":"(Macro) Core"},{"location":"sasjs-core/#macrocore-library","text":"The MacroCore library provides routines and helpers for use in SAS side application logic and deployments. It is divided into 5 sections: BASE - Macro functions ( mf_* ) and macro procedures ( mp_* ) that can be used in all flavours of SAS. No XCMD is assumed. META - Macros ( mm_* ) that interface with SAS 9 metadata. No XCMD assumed. METAX - Metadata macros that depend on XCMD, eg those interfacing with the Batch tools. VIYA - Macros that interface with SAS Viya. No XCMD assumed. Check out the source code and documentation .","title":"MacroCore Library"},{"location":"sasjs-core/#installation","text":"The easest way to make these macros available is to just include them in your session as follows: filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; If you don't have internet access from your SAS session, you can download the macros directly from here and place them in your autoexec, or initialisation file. A further option might be to git clone the repository, and set up sasautos, eg: options insert =(sasautos= \"/your/path/macrocore/base\" )); options insert =(sasautos= \"/your/path/macrocore/meta\" )); The final deployment option, if you are building web apps, is Node Package Manager - simply run npm install @sasjs/core in your project repository. Using sasjs-cli you can compile these macros into your web services at build time, and lock them to a particular release.","title":"Installation"},{"location":"sasjs-core/#useful-features","text":"","title":"Useful Features"},{"location":"sasjs-core/#generating-viya-client-secret-in-sas-studio","text":"The CORE library can be used by an administrator to register a Viya Client & Secret. Execute the following: filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; /* create random client and secret */ %mv_registerclient (outds=clientinfo) This will generate a URL in the log, which must be followed to generate a refresh code (one time step). Paste that code into the macro below: /* paste the code below */ %mv_tokenauth(inds=clientinfo,code=xET8ETs74z) There is now a table in the WORK library containing the access token. The clientinfo table contains the client & secret. A convenient (but insecure) way to extract these details to the log: /* extract client, secret & token to the log */ data _null_; merge mv_tokenauth clientinfo(drop=error); put access_token=; put refresh_token=; put client_id=; put client_secret=; run; Warning Security tokens are like passwords. The above is provided for convenience, but you should avoid writing tokens to log files unless you are very sure of your environment.","title":"Generating Viya Client &amp; Secret in SAS Studio"},{"location":"sasjs-core/#calling-sas-viya-from-sas-9","text":"When calling SAS Viya from SAS 9, the oauth_bearer=sas_services option is not available. However it is still possible to call the APIs in SAS 9 with proc http in the core library by putting the ACCESS_TOKEN in a macro variable and referring to that variable in the access_token_var= keyword parameter of each viya macro (starting mv_ ). Warning Saving security tokens in project repositories, especially if they are committed to source control, is a security risk - as anyone with access can use them to make modifications on the Viya platform. Be sure to use a secure mechanism such as the %inc from a secure directory, or another approved mechanism for securing these kinds of variables. Avoid writing Access Tokens to log files.","title":"Calling SAS Viya from SAS 9"},{"location":"security/","text":"Security \u00b6 Deploying web apps is generally more secure than, say, Python or R, because the Javascript libraries that are included do not have access to the filesystem. The browser \"sandbox\" also prevents JS files loaded from a one domain from making calls to another domain (Cross Origin Resource Sharing / CORS ). That said, there are still a few security considerations to keep in mind when building apps on SAS. Shared Services account \u00b6 A shared system account for running web services is preferred as it can enable functionality for users that they cannot (or should not) perform themselves, eg database modifications (and for that, you should seriously consider Data Controlller for SAS\u00ae ). It can also avoids unix permissions issues, as created files are owned by default under the end user identity. However - as it is a shared account, the ability to run code under this identity should be appropriately governed. In particular, code injection must be protected against - for this reason, URL parameters are a bad idea, much better to send tables using an adapter such as SASjs . It is also recommended to ensure you have a secure release process, which includes code review and automated testing, to ensure the safety of your production environment. SAS 9 \u00b6 By default your services will run on a Stored Process server under the shared credentials stored in the SAS General Servers group group ( sassrv per factory settings). It is also possible to run STPs under a Workspace Server context (where end user OS credentials match &sysuserid ). SAS Viya \u00b6 By default, services will run on the SAS Compute server under the client identity. Since Viya 3.5 it is also possible to run under a shared identity, and to pool the session - see documentation . For enhanced sas viya security you can even determine which users can execute code on a particular context (all authenticated users, or a particular set of users.) SAS Groups \u00b6 As described in this excellent article the recommended approach for creating groups is to follow a convention such as App.<your_app> - and apply this to your SAS App Folder (appLoc) as well as the scope when generating the client (if SAS Viya) Folder Security \u00b6 The recommended SASjs folder structure is to group services into app subfolders, so that security can be applied at backend. The app itself can also be secured by setting permission on the parent folder. There is one more thing to consider - services can be viewed (and executed) by anyone who has the READ permission, either using the SERVERURL/SASStoredProcess?_action=1063 url or by navigating in SASJobExecution on Viya. Therefore your services should be built in such a way that no damage would be caused if an end user were to accidentally 'click' on one of the services and run it. This folder structure is enforced when using the sasjs-cli tool. Idempotence \u00b6 Services should be built in such a way that they can be safely executed more than once. This is because it's possible that it WILL be run more than once (eg if the user clicks a button twice in succession). URL Parameters \u00b6 The use of URL parameters (which are automatically converted to macro variables in a SAS session) should be avoided. Apart from the risk of code injection, there are also a number of reserved variables that may cause unintentional naming conflicts. Use the SASjs adapter instead! Note that Viya automatically escapes certain characters (eg ; ) to reduce this risk. SubResource Integrity \u00b6 An integrity hash is a checksum of a file - if just one character inside a file is changed, the checksum is totally different. This makes it a great tool for verifying that a CSS or JS file has not been modified since the checksum was generated. Content served over http (without SSL certificates) are extremely susceptible to Man in the Middle (MitM) attacks . For this reason, it is best practice to either bundle all your dependencies inside your app, or apply SubResource Integrity (SRI) checking as per the w3.org spec . The syntax looks like this: < script src = \"https://cdn.jsdelivr.net/npm/sasjs@1.10.8/index.js\" integrity = \"sha256-651B1pxDxaKb9yhXQOUSohZ+Nq9Txfc3gXlX/GSw1RQ=\" crossorigin = \"anonymous\" >< /script> If your CSS or JS files are released via github, then they are automatically available with SRI checks using JSDelivr - for instance, to get the latest script tag for SASjs you can just click here and select \"SRI\". If your files are elsewhere, or you'd like more control over the build, you can also generate the integrity hash yourself - here is the syntax: cat myfile.js | openssl dgst -sha384 -binary | openssl enc -base64 Third Party Server \u00b6 By setting up a dedicated web server and whitelisting it within SAS, you can isolate your frontend activities and enable frontend developers to deploy without having to enable access to the SAS Web Server directly. Web devs can then work locally and push to that server, or work on the server directly. One option for enabling remote (cloud) development is the open-source server edition of vscode: https://github.com/cdr/code-server (note - this won't work with vscodium due to non open-source components. To whitelist the server in Viya, open Environment Manager -> Configuration -> View -> Definitions and select sas.commons.web.security.cors . Make sure your domain (or * ) is entered under allowedHeaders , allowedMethods and AllowedOrigin . target=blank is unsafe \u00b6 Commonly used to open new tabs, be very careful opening external sites using a naked _target=blank attribute - this opens a vulnerability for hijacking. To avoid this, simply add a rel=\"noopener noreferrer\" attribute to the anchor tag. Content Security Policy \u00b6 This is a server setting that restricts the types of content that pages served from your domain can fetch. This might be to specific urls, or types of content (such as inline styles, base64 images, or external JS files). If you are being restricted by CSP policy you will see a message like the one below in your console window: Content Security Policy: The page's settings blocked the loading of a resource at https://cdn.jsdelivr.net/combine/npm/chart.js@2.9.3,npm/jquery@3.5.1,npm/@sasjs/adapter@1.0.6 (\"default-src\"). On SAS 9 the CSP configuration can be found in the following file location: !SASCONFIG/Lev1/Web/WebServer/conf/sas.conf The line to be modified will look something like this: Header set Content-Security-Policy \"default-src 'self' ; script-src 'unsafe-inline' https://cdn.jsdelivr.net https://stackpath.bootstrapcdn.com; font-src 'self' data: fonts.gstatic.com;style-src 'self' fonts.googleapis.com\" After modifying the CSP the mid tier will need to be restarted ( ./sas.servers.mid restart ) Whilst it is often impossible to implement maximally secure settings, the configuration goal should be to enable as few of the 'insecure' ones as possible. More information is available here . Note that the \"default-src\" provides a fallback where particular urls (eg font-src) are not specified.","title":"Security"},{"location":"security/#security","text":"Deploying web apps is generally more secure than, say, Python or R, because the Javascript libraries that are included do not have access to the filesystem. The browser \"sandbox\" also prevents JS files loaded from a one domain from making calls to another domain (Cross Origin Resource Sharing / CORS ). That said, there are still a few security considerations to keep in mind when building apps on SAS.","title":"Security"},{"location":"security/#shared-services-account","text":"A shared system account for running web services is preferred as it can enable functionality for users that they cannot (or should not) perform themselves, eg database modifications (and for that, you should seriously consider Data Controlller for SAS\u00ae ). It can also avoids unix permissions issues, as created files are owned by default under the end user identity. However - as it is a shared account, the ability to run code under this identity should be appropriately governed. In particular, code injection must be protected against - for this reason, URL parameters are a bad idea, much better to send tables using an adapter such as SASjs . It is also recommended to ensure you have a secure release process, which includes code review and automated testing, to ensure the safety of your production environment.","title":"Shared Services account"},{"location":"security/#sas-9","text":"By default your services will run on a Stored Process server under the shared credentials stored in the SAS General Servers group group ( sassrv per factory settings). It is also possible to run STPs under a Workspace Server context (where end user OS credentials match &sysuserid ).","title":"SAS 9"},{"location":"security/#sas-viya","text":"By default, services will run on the SAS Compute server under the client identity. Since Viya 3.5 it is also possible to run under a shared identity, and to pool the session - see documentation . For enhanced sas viya security you can even determine which users can execute code on a particular context (all authenticated users, or a particular set of users.)","title":"SAS Viya"},{"location":"security/#sas-groups","text":"As described in this excellent article the recommended approach for creating groups is to follow a convention such as App.<your_app> - and apply this to your SAS App Folder (appLoc) as well as the scope when generating the client (if SAS Viya)","title":"SAS Groups"},{"location":"security/#folder-security","text":"The recommended SASjs folder structure is to group services into app subfolders, so that security can be applied at backend. The app itself can also be secured by setting permission on the parent folder. There is one more thing to consider - services can be viewed (and executed) by anyone who has the READ permission, either using the SERVERURL/SASStoredProcess?_action=1063 url or by navigating in SASJobExecution on Viya. Therefore your services should be built in such a way that no damage would be caused if an end user were to accidentally 'click' on one of the services and run it. This folder structure is enforced when using the sasjs-cli tool.","title":"Folder Security"},{"location":"security/#idempotence","text":"Services should be built in such a way that they can be safely executed more than once. This is because it's possible that it WILL be run more than once (eg if the user clicks a button twice in succession).","title":"Idempotence"},{"location":"security/#url-parameters","text":"The use of URL parameters (which are automatically converted to macro variables in a SAS session) should be avoided. Apart from the risk of code injection, there are also a number of reserved variables that may cause unintentional naming conflicts. Use the SASjs adapter instead! Note that Viya automatically escapes certain characters (eg ; ) to reduce this risk.","title":"URL Parameters"},{"location":"security/#subresource-integrity","text":"An integrity hash is a checksum of a file - if just one character inside a file is changed, the checksum is totally different. This makes it a great tool for verifying that a CSS or JS file has not been modified since the checksum was generated. Content served over http (without SSL certificates) are extremely susceptible to Man in the Middle (MitM) attacks . For this reason, it is best practice to either bundle all your dependencies inside your app, or apply SubResource Integrity (SRI) checking as per the w3.org spec . The syntax looks like this: < script src = \"https://cdn.jsdelivr.net/npm/sasjs@1.10.8/index.js\" integrity = \"sha256-651B1pxDxaKb9yhXQOUSohZ+Nq9Txfc3gXlX/GSw1RQ=\" crossorigin = \"anonymous\" >< /script> If your CSS or JS files are released via github, then they are automatically available with SRI checks using JSDelivr - for instance, to get the latest script tag for SASjs you can just click here and select \"SRI\". If your files are elsewhere, or you'd like more control over the build, you can also generate the integrity hash yourself - here is the syntax: cat myfile.js | openssl dgst -sha384 -binary | openssl enc -base64","title":"SubResource Integrity"},{"location":"security/#third-party-server","text":"By setting up a dedicated web server and whitelisting it within SAS, you can isolate your frontend activities and enable frontend developers to deploy without having to enable access to the SAS Web Server directly. Web devs can then work locally and push to that server, or work on the server directly. One option for enabling remote (cloud) development is the open-source server edition of vscode: https://github.com/cdr/code-server (note - this won't work with vscodium due to non open-source components. To whitelist the server in Viya, open Environment Manager -> Configuration -> View -> Definitions and select sas.commons.web.security.cors . Make sure your domain (or * ) is entered under allowedHeaders , allowedMethods and AllowedOrigin .","title":"Third Party Server"},{"location":"security/#targetblank-is-unsafe","text":"Commonly used to open new tabs, be very careful opening external sites using a naked _target=blank attribute - this opens a vulnerability for hijacking. To avoid this, simply add a rel=\"noopener noreferrer\" attribute to the anchor tag.","title":"target=blank is unsafe"},{"location":"security/#content-security-policy","text":"This is a server setting that restricts the types of content that pages served from your domain can fetch. This might be to specific urls, or types of content (such as inline styles, base64 images, or external JS files). If you are being restricted by CSP policy you will see a message like the one below in your console window: Content Security Policy: The page's settings blocked the loading of a resource at https://cdn.jsdelivr.net/combine/npm/chart.js@2.9.3,npm/jquery@3.5.1,npm/@sasjs/adapter@1.0.6 (\"default-src\"). On SAS 9 the CSP configuration can be found in the following file location: !SASCONFIG/Lev1/Web/WebServer/conf/sas.conf The line to be modified will look something like this: Header set Content-Security-Policy \"default-src 'self' ; script-src 'unsafe-inline' https://cdn.jsdelivr.net https://stackpath.bootstrapcdn.com; font-src 'self' data: fonts.gstatic.com;style-src 'self' fonts.googleapis.com\" After modifying the CSP the mid tier will need to be restarted ( ./sas.servers.mid restart ) Whilst it is often impossible to implement maximally secure settings, the configuration goal should be to enable as few of the 'insecure' ones as possible. More information is available here . Note that the \"default-src\" provides a fallback where particular urls (eg font-src) are not specified.","title":"Content Security Policy"},{"location":"services/","text":"Services \u00b6 All of the quickstart apps use two backend services, both of which query the sashelp.springs dataset. The first is used to fetch a list of areas (to populate the dropdown) and the other will fetch a list of springs for a chosen area (to populate the grid). The process for registering these services is almost identical between SAS9 and Viya . Simply open SAS Studio (must be StudioV in Viya) and run the code below. %let appLoc=/Public/app; /* Configure Metadata or Viya Folder location here */ filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; /* compile macros */ filename ft15f001 temp; parmcards4 ; proc sql; create table areas as select distinct area from sashelp . springs; %webout (OPEN) %webout (OBJ,areas) %webout (CLOSE) ;;;; %mp_createwebservice (path= &appLoc /common,name=appinit) filename ft15f001 temp; parmcards4; %webout (FETCH) /* fetch areas table sent from frontend */ proc sql; create table springs as select * from sashelp . springs where area in ( select area from areas); %webout (OPEN) %webout (OBJ,springs) %webout (CLOSE) ;;;; %mp_createwebservice (path= &appLoc /common,name=getdata)","title":"Services"},{"location":"services/#services","text":"All of the quickstart apps use two backend services, both of which query the sashelp.springs dataset. The first is used to fetch a list of areas (to populate the dropdown) and the other will fetch a list of springs for a chosen area (to populate the grid). The process for registering these services is almost identical between SAS9 and Viya . Simply open SAS Studio (must be StudioV in Viya) and run the code below. %let appLoc=/Public/app; /* Configure Metadata or Viya Folder location here */ filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\" ; %inc mc; /* compile macros */ filename ft15f001 temp; parmcards4 ; proc sql; create table areas as select distinct area from sashelp . springs; %webout (OPEN) %webout (OBJ,areas) %webout (CLOSE) ;;;; %mp_createwebservice (path= &appLoc /common,name=appinit) filename ft15f001 temp; parmcards4; %webout (FETCH) /* fetch areas table sent from frontend */ proc sql; create table springs as select * from sashelp . springs where area in ( select area from areas); %webout (OPEN) %webout (OBJ,springs) %webout (CLOSE) ;;;; %mp_createwebservice (path= &appLoc /common,name=getdata)","title":"Services"},{"location":"state-management/","text":"State Management \u00b6 Best practice for building web apps is for each service to be 'stateless'. If your logic depends on state, then that state can be managed in a number of ways: Warning Do not use SAS 9 sessions! They can unbalance your load balancer. Do not use url params! They can cause code injection. Cookies \u00b6 Small amounts of data can be kept on the user browser in the form of cookies. These are accessed in SAS by means of the _htcook macro variable, accessed as follows: proc sql noprint; select * from dictionary . macros where name= \"_HTCOOK\" ;","title":"State management"},{"location":"state-management/#state-management","text":"Best practice for building web apps is for each service to be 'stateless'. If your logic depends on state, then that state can be managed in a number of ways: Warning Do not use SAS 9 sessions! They can unbalance your load balancer. Do not use url params! They can cause code injection.","title":"State Management"},{"location":"state-management/#cookies","text":"Small amounts of data can be kept on the user browser in the form of cookies. These are accessed in SAS by means of the _htcook macro variable, accessed as follows: proc sql noprint; select * from dictionary . macros where name= \"_HTCOOK\" ;","title":"Cookies"},{"location":"testing/","text":"Testing \u00b6 Our favourite tool for testing is Cypress - it's what we use for SASjs and it's user friendly and fully featured. If you have chrome it will even launch with CORS disabled for seamless API testing. For SAS testing (macros, jobs & services) you can also use sasjs test . Browsers \u00b6 Most likely you will only need to test you applications against a very limited set of browsers (the ones your company uses, which typically inludes IE). For testing a wider set of browsers, the following tools are useful Browserstack (paid) https://ftp.mozilla.org/pub/firefox/releases/ (previous versions of FF) Accessibility \u00b6 There are several tools you can use to ensure your app can be consumed by users of all abilities (ie, is navigable by both keyboard & mouse and has the necessary labels for screen readers etc): Google Lighthouse - just open dev tools in Chrome and run the report on the lighthouse tab The lighthouse CLI - more info in the project readme . The specs are in the lighthouserc.js file, which shows the pages tested, and the target score (90%). The eslint-plugin-jsx-a11y NPM module - all recommended rules should be applied in the .eslintrc file ( \"plugin:jsx-a11y/recommended\" ). Full list of rules: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y#supported-rules https://www.nvaccess.org -> a free download to check for screen reader compatibility","title":"Testing"},{"location":"testing/#testing","text":"Our favourite tool for testing is Cypress - it's what we use for SASjs and it's user friendly and fully featured. If you have chrome it will even launch with CORS disabled for seamless API testing. For SAS testing (macros, jobs & services) you can also use sasjs test .","title":"Testing"},{"location":"testing/#browsers","text":"Most likely you will only need to test you applications against a very limited set of browsers (the ones your company uses, which typically inludes IE). For testing a wider set of browsers, the following tools are useful Browserstack (paid) https://ftp.mozilla.org/pub/firefox/releases/ (previous versions of FF)","title":"Browsers"},{"location":"testing/#accessibility","text":"There are several tools you can use to ensure your app can be consumed by users of all abilities (ie, is navigable by both keyboard & mouse and has the necessary labels for screen readers etc): Google Lighthouse - just open dev tools in Chrome and run the report on the lighthouse tab The lighthouse CLI - more info in the project readme . The specs are in the lighthouserc.js file, which shows the pages tested, and the target score (90%). The eslint-plugin-jsx-a11y NPM module - all recommended rules should be applied in the .eslintrc file ( \"plugin:jsx-a11y/recommended\" ). Full list of rules: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y#supported-rules https://www.nvaccess.org -> a free download to check for screen reader compatibility","title":"Accessibility"},{"location":"videos/","text":"Videos \u00b6 Building Web Apps with SAS \u00b6 SGF2020 Virtual Presentation \u00b6 Build a React Web App on SAS Viya in under 5 minutes \u00b6 Clone, install, configure, build, deploy frontend, generate backend! Create a SAS App in Just One Minute \u00b6 This process will work the same on both SAS 9 and Viya - create the SAS Web Service, deploy and configure the frontend, launch! SASjs CLI \u00b6 DevOps with SASjs \u00b6 An overview of the SASjs framework and how it can enable local (git native) SAS development whilst deploying and running programs on a remote SAS server. Recorded in June 2021 for the SAS User Group UK & Ireland . The slides are here . Use \"sasjs doc\" to generate HTML documentation from source programs \u00b6 With a single command you can auto-generate documentation directly from your SAS Jobs and Services. Recent updates include a homepage, and a Data Lineage diagram (jobs link back to docs, tables link directly to Data Controller if configured). Using gitpod with SASjs \u00b6 We configured our jobs template repository so that it can be launched with gitpod in a single click! https://gitpod.io/#github.com/sasjs/template_jobs Running Tests with SASjs \u00b6 If you'd like to check your test coverage, and execute isolated tests in a flow, for SAS Jobs, Macros and Web Services, then this video will be interesting! Full docs available here . Other Videos \u00b6 Scaffolding a SAS Project in VSCode with SASjs \u00b6 How to compile, build, and deploy SAS projects from a local machine using your preferred IDE (eg VS Code). Includes an overview of sasjs flow , sasjs job execute , sasjs compile , sasjs build , sasjs deploy and sasjs add as well as sasjs folder delete . Deploying and Using the Viya Token Generator \u00b6 On Viya you need a client, secret and access_token to autodeploy your backend. This app makes it easy. SAS Streamed SAS Rap \u00b6 Streaming an MP3 file from a SAS Web Service. A to the mfn K! HTML5 Games \u00b6 Rock Roller \u00b6 Github repo here Sonic the Hedgehog \u00b6 Github repo here","title":"Videos"},{"location":"videos/#videos","text":"","title":"Videos"},{"location":"videos/#building-web-apps-with-sas","text":"","title":"Building Web Apps with SAS"},{"location":"videos/#sgf2020-virtual-presentation","text":"","title":"SGF2020 Virtual Presentation"},{"location":"videos/#build-a-react-web-app-on-sas-viya-in-under-5-minutes","text":"Clone, install, configure, build, deploy frontend, generate backend!","title":"Build a React Web App on SAS Viya in under 5 minutes"},{"location":"videos/#create-a-sas-app-in-just-one-minute","text":"This process will work the same on both SAS 9 and Viya - create the SAS Web Service, deploy and configure the frontend, launch!","title":"Create a SAS App in Just One Minute"},{"location":"videos/#sasjs-cli","text":"","title":"SASjs CLI"},{"location":"videos/#devops-with-sasjs","text":"An overview of the SASjs framework and how it can enable local (git native) SAS development whilst deploying and running programs on a remote SAS server. Recorded in June 2021 for the SAS User Group UK & Ireland . The slides are here .","title":"DevOps with SASjs"},{"location":"videos/#use-sasjs-doc-to-generate-html-documentation-from-source-programs","text":"With a single command you can auto-generate documentation directly from your SAS Jobs and Services. Recent updates include a homepage, and a Data Lineage diagram (jobs link back to docs, tables link directly to Data Controller if configured).","title":"Use \"sasjs doc\" to generate HTML documentation from source programs"},{"location":"videos/#using-gitpod-with-sasjs","text":"We configured our jobs template repository so that it can be launched with gitpod in a single click! https://gitpod.io/#github.com/sasjs/template_jobs","title":"Using gitpod with SASjs"},{"location":"videos/#running-tests-with-sasjs","text":"If you'd like to check your test coverage, and execute isolated tests in a flow, for SAS Jobs, Macros and Web Services, then this video will be interesting! Full docs available here .","title":"Running Tests with SASjs"},{"location":"videos/#other-videos","text":"","title":"Other Videos"},{"location":"videos/#scaffolding-a-sas-project-in-vscode-with-sasjs","text":"How to compile, build, and deploy SAS projects from a local machine using your preferred IDE (eg VS Code). Includes an overview of sasjs flow , sasjs job execute , sasjs compile , sasjs build , sasjs deploy and sasjs add as well as sasjs folder delete .","title":"Scaffolding a SAS Project in VSCode with SASjs"},{"location":"videos/#deploying-and-using-the-viya-token-generator","text":"On Viya you need a client, secret and access_token to autodeploy your backend. This app makes it easy.","title":"Deploying and Using the Viya Token Generator"},{"location":"videos/#sas-streamed-sas-rap","text":"Streaming an MP3 file from a SAS Web Service. A to the mfn K!","title":"SAS Streamed SAS Rap"},{"location":"videos/#html5-games","text":"","title":"HTML5 Games"},{"location":"videos/#rock-roller","text":"Github repo here","title":"Rock Roller"},{"location":"videos/#sonic-the-hedgehog","text":"Github repo here","title":"Sonic the Hedgehog"},{"location":"vscode/","text":"VS Code - for SAS \u00b6 VS Code is the worlds best IDE! At least, that's our opinion. It's a great IDE and very usable for both SAS and Web development. When it comes to the download, we actually recommend VSCodium - which is simply VSCode without the telemetry. Extensions \u00b6 VS Code has many marketplace extensions - these are our favourites: SASjs \u00b6 Using the SASjs extension in the VS Code marketplace you can: submit code to SAS (Viya, EBI or Base SAS) and return the log. This uses the regular global sasjsconfig file, so the tokens generated can be reused between VS Code and the SASjs CLI . Lint your SAS code (open view/problems to see the results, or CTRL+M) Enjoy syntax highlighting The extension is available both on the VS Code market place and also open VSX (suitable for VSCodium and Theia). You can also auto-format your SAS code by right-clicking and selecting 'format': The SASjs VS Code extension is MIT Open Source and free for commercial use. Gremlins Tracker \u00b6 When sharing code from one environment (eg UTF8) to another (eg WLATIN1) you can end up with code that will not run in EG due to the existence of hidden special characters. This plugin will highlight all the rows containing such 'gremlins'. A real time saver / problem avoider! Draw IO \u00b6 This extension lets you build diagrams directly in VS Code! You can save as PNG or SVG, and changes are stored as text so you can track them in GIT. https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio Journal \u00b6 This is actually two extensions. The first lets you use VS Code as a task manager and work diary. The second adds a calendar icon to the left hand side of your IDE so you can easily browse! Journal Viewer Tips & Tricks \u00b6 Keyboard shortcuts \u00b6 10x your productivity by committing the following to memory: Shortcut Result CTRL+ALT + up or down arrow Multiline select with the cursor CTRL+SHIFT+P Bring up the command pane Gitpod \u00b6 Instant workspace in the cloud! Just add \"gitpod.io/#\" prior to the url, like this: \"gitpod.io/#github.com/sasjs/core\". A great demo of the SASjs CLI is available here: https://gitpid.io/#github.com/sasjs/template_jobs . Github Viewer \u00b6 Are you trying to read code on github, but find it cumbersome to navigate each page? Just add \"1s\" in the url between \"github\" and \".com\" - like this: \"github1s.com/sasjs/core\" And get instant VS Code in the browser!","title":"VSCode"},{"location":"vscode/#vs-code-for-sas","text":"VS Code is the worlds best IDE! At least, that's our opinion. It's a great IDE and very usable for both SAS and Web development. When it comes to the download, we actually recommend VSCodium - which is simply VSCode without the telemetry.","title":"VS Code - for SAS"},{"location":"vscode/#extensions","text":"VS Code has many marketplace extensions - these are our favourites:","title":"Extensions"},{"location":"vscode/#sasjs","text":"Using the SASjs extension in the VS Code marketplace you can: submit code to SAS (Viya, EBI or Base SAS) and return the log. This uses the regular global sasjsconfig file, so the tokens generated can be reused between VS Code and the SASjs CLI . Lint your SAS code (open view/problems to see the results, or CTRL+M) Enjoy syntax highlighting The extension is available both on the VS Code market place and also open VSX (suitable for VSCodium and Theia). You can also auto-format your SAS code by right-clicking and selecting 'format': The SASjs VS Code extension is MIT Open Source and free for commercial use.","title":"SASjs"},{"location":"vscode/#gremlins-tracker","text":"When sharing code from one environment (eg UTF8) to another (eg WLATIN1) you can end up with code that will not run in EG due to the existence of hidden special characters. This plugin will highlight all the rows containing such 'gremlins'. A real time saver / problem avoider!","title":"Gremlins Tracker"},{"location":"vscode/#draw-io","text":"This extension lets you build diagrams directly in VS Code! You can save as PNG or SVG, and changes are stored as text so you can track them in GIT. https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio","title":"Draw IO"},{"location":"vscode/#journal","text":"This is actually two extensions. The first lets you use VS Code as a task manager and work diary. The second adds a calendar icon to the left hand side of your IDE so you can easily browse! Journal Viewer","title":"Journal"},{"location":"vscode/#tips-tricks","text":"","title":"Tips &amp; Tricks"},{"location":"vscode/#keyboard-shortcuts","text":"10x your productivity by committing the following to memory: Shortcut Result CTRL+ALT + up or down arrow Multiline select with the cursor CTRL+SHIFT+P Bring up the command pane","title":"Keyboard shortcuts"},{"location":"vscode/#gitpod","text":"Instant workspace in the cloud! Just add \"gitpod.io/#\" prior to the url, like this: \"gitpod.io/#github.com/sasjs/core\". A great demo of the SASjs CLI is available here: https://gitpid.io/#github.com/sasjs/template_jobs .","title":"Gitpod"},{"location":"vscode/#github-viewer","text":"Are you trying to read code on github, but find it cumbersome to navigate each page? Just add \"1s\" in the url between \"github\" and \".com\" - like this: \"github1s.com/sasjs/core\" And get instant VS Code in the browser!","title":"Github Viewer"},{"location":"windows/","text":"Windows \u00b6 The reality for many SAS developers is that they are working in locked down windows machines without admin rights. This causes problems when trying to install basic tooling such as GIT or NPM. The correct approach in such circumstances is to simply make a request for these apps to be installed, so that you can be enabled to create amazing, supportable, maintainable web applications for your end users. The alternative is to use portable versions that do not require admin privileges to execute. Note If you are using powershell, and you don't have access to change your environment variables, you can add your paths to $PROFILE script $env:Path . Thanks Christopher Mortimer for the tip! VSCode \u00b6 VSCode is a powerful editor that includes a commandline that will run both CMD and POWERSHELL. You can download the full version here or use the portable version here . NPM \u00b6 Node Package Manager is an essential piece of kit, as it allows the dependencies of your project to be installed in a reproduceable manner. You can download the full version here , or - to install npm without admin rights: visit the official download page and extract the Windows Binary (zip file - not the installer). Copy the contents to a filesystem location, eg C:\\Tools . Append the path (eg C:\\Tools; ) to the PATH variable in Environment Variables. You can access the Environment Variables dialog, by right clicking on the Computer > Properties > Advanced system settings > Advanced tab > Environment Variables. If you don\u2019t have permission to access Environment Variables dialog, you can try the following command in the Run dialog: rundll32 sysdm.cpl,EditEnvironmentVariables . GIT \u00b6 The full version of git can be downloaded here or use the portable version here with the following instructions: Download the portable .exe file from the releases page and unzip it to a location in your filesystem. Inside the unzipped folder will be a folder called cmd . This contains the git.exe file. There is also a usr/bin folder - which contains ssh-keygen.exe . Add both of these locations to the PATH environment variable for your windows account, as per below. Be sure to hit OK twice for the change to be saved! You can now open a new shell window and create your SSH key using the ssh-keygen command. rsync \u00b6 It's very handy to be able to rsync your local web content to the SAS web server. The git bash shell does not come with rsync by default. A guide to installing it (using git bash) is available here CMDer \u00b6 This comes prebundled with GIT, allows a number of unix commands, and enables a remote (cloud) config, worth checking out: https://cmder.net/","title":"Windows"},{"location":"windows/#windows","text":"The reality for many SAS developers is that they are working in locked down windows machines without admin rights. This causes problems when trying to install basic tooling such as GIT or NPM. The correct approach in such circumstances is to simply make a request for these apps to be installed, so that you can be enabled to create amazing, supportable, maintainable web applications for your end users. The alternative is to use portable versions that do not require admin privileges to execute. Note If you are using powershell, and you don't have access to change your environment variables, you can add your paths to $PROFILE script $env:Path . Thanks Christopher Mortimer for the tip!","title":"Windows"},{"location":"windows/#vscode","text":"VSCode is a powerful editor that includes a commandline that will run both CMD and POWERSHELL. You can download the full version here or use the portable version here .","title":"VSCode"},{"location":"windows/#npm","text":"Node Package Manager is an essential piece of kit, as it allows the dependencies of your project to be installed in a reproduceable manner. You can download the full version here , or - to install npm without admin rights: visit the official download page and extract the Windows Binary (zip file - not the installer). Copy the contents to a filesystem location, eg C:\\Tools . Append the path (eg C:\\Tools; ) to the PATH variable in Environment Variables. You can access the Environment Variables dialog, by right clicking on the Computer > Properties > Advanced system settings > Advanced tab > Environment Variables. If you don\u2019t have permission to access Environment Variables dialog, you can try the following command in the Run dialog: rundll32 sysdm.cpl,EditEnvironmentVariables .","title":"NPM"},{"location":"windows/#git","text":"The full version of git can be downloaded here or use the portable version here with the following instructions: Download the portable .exe file from the releases page and unzip it to a location in your filesystem. Inside the unzipped folder will be a folder called cmd . This contains the git.exe file. There is also a usr/bin folder - which contains ssh-keygen.exe . Add both of these locations to the PATH environment variable for your windows account, as per below. Be sure to hit OK twice for the change to be saved! You can now open a new shell window and create your SSH key using the ssh-keygen command.","title":"GIT"},{"location":"windows/#rsync","text":"It's very handy to be able to rsync your local web content to the SAS web server. The git bash shell does not come with rsync by default. A guide to installing it (using git bash) is available here","title":"rsync"},{"location":"windows/#cmder","text":"This comes prebundled with GIT, allows a number of unix commands, and enables a remote (cloud) config, worth checking out: https://cmder.net/","title":"CMDer"},{"location":"workshops/","text":"Workshops \u00b6 Are you looking to build the capability to deploy fresh and inspiring new interfaces into the SAS Platform? Get yourself off on the right foot with a live training package, review the best practices, pitfalls to avoid, and learn all the tips, tooling & techniques for rapid delivery and continuous deployment of SASjs Web Apps. Session Types \u00b6 Training is available either remotely or on-site in the following durations: 1 hour - overview of the tooling, available resources, best practices, etc. Configure and deploy a working seed app. FREE OF CHARGE (remote). Half day - Build, deploy and release a functional app, including dependent macros, use of a database, and release notes Full day - Design, build, deploy & release a complex multi-user app For more information, contact Allan Bowe via private message. Pre-requisites \u00b6 Your own SAS Environment (SAS 9 or Viya). A location in the SAS 9 Folder tree or the SAS Viya folders service in which to create services (Stored Processes or Job Execution Services) A laptop with a browser, GIT, NPM and VSCodium text editor (or equivalent) If the session is a half or a full day, then a library with WRITE access for data storage If you are part of a remote workshop, a dual monitor setup is highly recommended System Checks \u00b6 To save time on the day it will help to ensure that you have the above prerequisites. Checks can be made as follows: SAS Access \u00b6 You will need an instance of SAS in order to build the backend! Viya \u00b6 If you are planning to use Viya, you will also need Admin rights in order to get the API key. You should be able to execute this code without errors: options noquotelenmax; filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/base/mf_loc.sas\" ; %inc mc ; data _null_ ; infile \"%mf_loc(VIYACONFIG)/etc/SASSecurityCertificateFramework/tokens/consul/default/client.token\" ; input token:$ 64 .; call symputx( 'consul_token' ,token) ; run; It is possible to build apps without admin rights, however you won't be able to auto-deploy using the CLI tool without a client and secret. You also need the ability to create Job Execution services somewhere in the folder tree. You can check this using /SASJobExecution (or programmatically using SAS Studio). SAS 9 \u00b6 You need the ability to create stored processes somewhere in the folder tree. You can check this using SAS Management Console, or DI Studio, or Enterprise Guide (if enabled). You can also try by creating programmatically using SAS Studio. Local Tools \u00b6 Whilst you could develop on the server, typically builds and changes are made locally and then deployed to a server. So on your laptop or desktop you will need the following items of software: GIT \u00b6 This is used mainly to clone the seed apps. Install from here: https://git-scm.com/ . If you do not have admin rights, try this guide . NPM \u00b6 Node Package Manager (NPM) is a JavaScript framework for managing project dependencies. It also handles installations and a lot of other functionality. It can be downloaded here: https://nodejs.org/en/download . If you do not have admin rights, try this guide . VSCode \u00b6 You don't necessarily need VSCode but it's a great editor and includes an integrated terminal for running commands. It can be downloaded (without telemetry) from here: https://vscodium.com/ , and a portable version (installable without admin rights) can be obtained from this guide . Final checks \u00b6 Open VScode, select Terminal -> New Terminal, and submit the following commands: git --version npm -v node -v If you get a version number for each of the above, and the version for node is above 10.3, you're good to go!","title":"Workshops"},{"location":"workshops/#workshops","text":"Are you looking to build the capability to deploy fresh and inspiring new interfaces into the SAS Platform? Get yourself off on the right foot with a live training package, review the best practices, pitfalls to avoid, and learn all the tips, tooling & techniques for rapid delivery and continuous deployment of SASjs Web Apps.","title":"Workshops"},{"location":"workshops/#session-types","text":"Training is available either remotely or on-site in the following durations: 1 hour - overview of the tooling, available resources, best practices, etc. Configure and deploy a working seed app. FREE OF CHARGE (remote). Half day - Build, deploy and release a functional app, including dependent macros, use of a database, and release notes Full day - Design, build, deploy & release a complex multi-user app For more information, contact Allan Bowe via private message.","title":"Session Types"},{"location":"workshops/#pre-requisites","text":"Your own SAS Environment (SAS 9 or Viya). A location in the SAS 9 Folder tree or the SAS Viya folders service in which to create services (Stored Processes or Job Execution Services) A laptop with a browser, GIT, NPM and VSCodium text editor (or equivalent) If the session is a half or a full day, then a library with WRITE access for data storage If you are part of a remote workshop, a dual monitor setup is highly recommended","title":"Pre-requisites"},{"location":"workshops/#system-checks","text":"To save time on the day it will help to ensure that you have the above prerequisites. Checks can be made as follows:","title":"System Checks"},{"location":"workshops/#sas-access","text":"You will need an instance of SAS in order to build the backend!","title":"SAS Access"},{"location":"workshops/#viya","text":"If you are planning to use Viya, you will also need Admin rights in order to get the API key. You should be able to execute this code without errors: options noquotelenmax; filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/base/mf_loc.sas\" ; %inc mc ; data _null_ ; infile \"%mf_loc(VIYACONFIG)/etc/SASSecurityCertificateFramework/tokens/consul/default/client.token\" ; input token:$ 64 .; call symputx( 'consul_token' ,token) ; run; It is possible to build apps without admin rights, however you won't be able to auto-deploy using the CLI tool without a client and secret. You also need the ability to create Job Execution services somewhere in the folder tree. You can check this using /SASJobExecution (or programmatically using SAS Studio).","title":"Viya"},{"location":"workshops/#sas-9","text":"You need the ability to create stored processes somewhere in the folder tree. You can check this using SAS Management Console, or DI Studio, or Enterprise Guide (if enabled). You can also try by creating programmatically using SAS Studio.","title":"SAS 9"},{"location":"workshops/#local-tools","text":"Whilst you could develop on the server, typically builds and changes are made locally and then deployed to a server. So on your laptop or desktop you will need the following items of software:","title":"Local Tools"},{"location":"workshops/#git","text":"This is used mainly to clone the seed apps. Install from here: https://git-scm.com/ . If you do not have admin rights, try this guide .","title":"GIT"},{"location":"workshops/#npm","text":"Node Package Manager (NPM) is a JavaScript framework for managing project dependencies. It also handles installations and a lot of other functionality. It can be downloaded here: https://nodejs.org/en/download . If you do not have admin rights, try this guide .","title":"NPM"},{"location":"workshops/#vscode","text":"You don't necessarily need VSCode but it's a great editor and includes an integrated terminal for running commands. It can be downloaded (without telemetry) from here: https://vscodium.com/ , and a portable version (installable without admin rights) can be obtained from this guide .","title":"VSCode"},{"location":"workshops/#final-checks","text":"Open VScode, select Terminal -> New Terminal, and submit the following commands: git --version npm -v node -v If you get a version number for each of the above, and the version for node is above 10.3, you're good to go!","title":"Final checks"}]}